!function(r,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e(require("react"));else if("function"==typeof define&&define.amd)define(["react"],e);else{var t="object"==typeof exports?e(require("react")):e(r.react);for(var n in t)("object"==typeof exports?exports:r)[n]=t[n]}}(window,(function(r){return function(r){var e={};function t(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return r[n].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=r,t.c=e,t.d=function(r,e,n){t.o(r,e)||Object.defineProperty(r,e,{enumerable:!0,get:n})},t.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},t.t=function(r,e){if(1&e&&(r=t(r)),8&e)return r;if(4&e&&"object"==typeof r&&r&&r.__esModule)return r;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:r}),2&e&&"string"!=typeof r)for(var a in r)t.d(n,a,function(e){return r[e]}.bind(null,a));return n},t.n=function(r){var e=r&&r.__esModule?function(){return r.default}:function(){return r};return t.d(e,"a",e),e},t.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},t.p="",t(t.s=36)}([function(e,t){e.exports=r},function(r,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DataParserError=void 0,e.DataParserError=function(){function r(e,t){Error.apply(this,arguments),this.name="DataParserError",this.message=e||"DataParserError",this.data=t,"function"==typeof Error.captureStackTrace?this.stack=Error.captureStackTrace(this,r):this.stack=(new Error).stack}return r.prototype=Object.create(Error.prototype),r.prototype.constructor=r,r}(),e.DataParserError.ERRORS={DATA_LINK_TYPE:"The dataLink must be an instance of the DataLink!",ITERATOR_ERROR:"Iterator value is incorrect",UNREACHABLE_PATH:"Unreachable path",FUNCTION_NAMING:"Function naming error",FUNCTION_ARGUMENTS:"Function arguments error",FUNCTION_UNKNOWN:"Unknown function error",OBJECT_KEY:"Object key error",OBJECT_KEY_STRING:"Object key is not a string error",OBJECT_VALUE:"Object value error",ARRAY_VALUE:"Array value error",VALUE:"Object / Array value error",NESTING:"Nesting error",LINK:"Link parsing error",DEFAULT:"Default parse error",INDEX_PART:"Index should be a part of the link",INDEX_LAST:"Index should be the last part of the link",INDEX_NAME:"Index name contains disallowed symbols",INDEX_EMPTY:"Index name must be a non empty string",INDEX_NOT_ARRAY_DATA:"Only array may be indexed"}},function(r,e,t){"use strict";var n=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.DataParserError=e.getDataLink=e.runAsyncGenerator=void 0;var a=n(t(32));e.runAsyncGenerator=a.default;var o=n(t(9));e.getDataLink=o.default;var i=t(1);Object.defineProperty(e,"DataParserError",{enumerable:!0,get:function(){return i.DataParserError}})},function(r,e,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(r,e,t,n){void 0===n&&(n=t),Object.defineProperty(r,n,{enumerable:!0,get:function(){return e[t]}})}:function(r,e,t,n){void 0===n&&(n=t),r[n]=e[t]}),a=this&&this.__exportStar||function(r,e){for(var t in r)"default"===t||e.hasOwnProperty(t)||n(e,r,t)};Object.defineProperty(e,"__esModule",{value:!0}),t(37),a(t(23),e),a(t(13),e),a(t(38),e)},function(r,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(r){var e=r.charCodeAt(0);return e>=97&&e<=122||e>=48&&e<=57||e>=65&&e<=90||95===e}},function(r,e,t){"use strict";var n=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.isFunction=e.isFunctionRef=e.isFunctionCall=e.isObject=e.isRootLink=e.isLink=e.isDataLink=void 0;var a=t(40);Object.defineProperty(e,"isDataLink",{enumerable:!0,get:function(){return a.isDataLink}}),Object.defineProperty(e,"isLink",{enumerable:!0,get:function(){return a.isLink}}),Object.defineProperty(e,"isRootLink",{enumerable:!0,get:function(){return a.isRootLink}}),Object.defineProperty(e,"isFunction",{enumerable:!0,get:function(){return a.isFunction}}),Object.defineProperty(e,"isFunctionCall",{enumerable:!0,get:function(){return a.isFunctionCall}}),Object.defineProperty(e,"isFunctionRef",{enumerable:!0,get:function(){return a.isFunctionRef}});var o=n(t(15));e.isObject=o.default},function(r,e,t){"use strict";var n=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.escapedPlainParser=e.objectParser=e.linkParser=e.functionParser=e.expressionParser=e.arrayParser=void 0;var a=n(t(42));e.arrayParser=a.default;var o=n(t(44));e.expressionParser=o.default;var i=n(t(45));e.functionParser=i.default;var u=n(t(47));e.linkParser=u.default;var s=n(t(48));e.objectParser=s.default;var c=n(t(49));e.escapedPlainParser=c.default;var l=t(1),f=n(t(25));e.default=function(r){var e=r.dataLink;if(!(e instanceof f.default))throw new l.DataParserError(l.DataParserError.ERRORS.DATA_LINK_TYPE);switch(e.getCurrentValue()[1]){case"@":return u.default(r);case"$":return i.default(r);case"{":return s.default(r);case"[":return a.default(r);case"`":return c.default(r);case"(":return o.default(r);default:throw new l.DataParserError(l.DataParserError.ERRORS.DEFAULT)}}},function(r,e,t){"use strict";var n=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.DataLink=e.dataLinkParser=void 0;var a=n(t(25));e.DataLink=a.default;var o=n(t(41));e.dataLinkParser=o.default,e.default=o.default},function(r,e,t){"use strict";var n=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.escapedPlainParser=e.objectParser=e.linkParser=e.functionParser=e.expressionParser=e.arrayParser=void 0;var i=o(t(53));e.arrayParser=i.default;var u=o(t(55));e.expressionParser=u.default;var s=o(t(56));e.functionParser=s.default;var c=o(t(57));e.linkParser=c.default;var l=o(t(58));e.objectParser=l.default;var f=o(t(59));e.escapedPlainParser=f.default;var d=t(2),p=t(10);e.default=function(r){var e,t;return n(this,(function(n){switch(n.label){case 0:if(!((e=r.dataLink)instanceof p.DataLink))throw new d.DataParserError(d.DataParserError.ERRORS.DATA_LINK_TYPE);switch(t=e.getCurrentValue()[1],t){case"@":return[3,1];case"$":return[3,3];case"{":return[3,5];case"[":return[3,7];case"(":return[3,9];case"`":return[3,11]}return[3,12];case 1:return[5,a(c.default(r))];case 2:return[2,n.sent()];case 3:return[5,a(s.default(r))];case 4:return[2,n.sent()];case 5:return[5,a(l.default(r))];case 6:return[2,n.sent()];case 7:return[5,a(i.default(r))];case 8:return[2,n.sent()];case 9:return[5,a(u.default(r))];case 10:return[2,n.sent()];case 11:return[2,f.default(r)];case 12:throw new d.DataParserError(d.DataParserError.ERRORS.DEFAULT)}}))}},function(r,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=t(7),a=new Map;e.default=function(r){if("string"!=typeof r||!r)throw new Error("getDataLink: Data link should be a non empty string!");return a.has(r)?a.get(r).reset():a.set(r,new n.DataLink(r)),a.get(r)}},function(r,e,t){"use strict";var n=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.DataLink=e.dataLinkParser=void 0;var a=n(t(52));e.dataLinkParser=a.default;var o=n(t(60));e.DataLink=o.default,e.default=a.default},function(r,e,t){"use strict";var n=Object.prototype.hasOwnProperty;function a(r,e){return r===e?0!==r||0!==e||1/r==1/e:r!=r&&e!=e}r.exports=function(r,e){if(a(r,e))return!0;if("object"!=typeof r||null===r||"object"!=typeof e||null===e)return!1;var t=Object.keys(r),o=Object.keys(e);if(t.length!==o.length)return!1;for(var i=0;i<t.length;i++)if(!n.call(e,t[i])||!a(r[t[i]],e[t[i]]))return!1;return!0}},function(r,e,t){"use strict";(function(r,n){var a,o=t(35);a="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r?r:n;var i=Object(o.a)(a);e.a=i}).call(this,t(65),t(66)(r))},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.getDeepCopyConstructor=e.deepCopy=void 0;var a=!1,o=function(r){return"[object Object]"===Object.prototype.toString.call(r)},i=function(r){var e,t,a,i,s,c;if(o(r)){var l=Object.getOwnPropertyDescriptors(r);try{for(var f=n(Object.getOwnPropertyNames(l)),d=f.next();!d.done;d=f.next()){var p=d.value;Object.prototype.hasOwnProperty.call(l,p)&&(l[p].value=u(l[p].value))}}catch(r){e={error:r}}finally{try{d&&!d.done&&(t=f.return)&&t.call(f)}finally{if(e)throw e.error}}try{for(var h=n(Object.getOwnPropertySymbols(l)),y=h.next();!y.done;y=h.next()){p=y.value;Object.prototype.hasOwnProperty.call(l,p)&&(l[p].value=u(l[p].value))}}catch(r){a={error:r}}finally{try{y&&!y.done&&(i=h.return)&&i.call(h)}finally{if(a)throw a.error}}return Object.create(Object.getPrototypeOf(r),l)}if(Array.isArray(r)){var v=[];try{for(var b=n(r),m=b.next();!m.done;m=b.next()){p=m.value;v.push(u(p))}}catch(r){s={error:r}}finally{try{m&&!m.done&&(c=b.return)&&c.call(b)}finally{if(s)throw s.error}}return v}return console.warn("[warning] deepCopy: an array or an object must be passed for processing."),r};e.deepCopy=i;var u=function(r){return o(r)||Array.isArray(r)?i(r):r};e.getDeepCopyConstructor=function(r){if(!o(r))throw new Error("DeepCopy: the source should be an object!");var e=s(r);return a&&e.push(o.toString(),u.toString(),i.toString()),new Function("source",e.join(""))};var s=function(r,e,t,n){if(void 0===e&&(e=""),void 0===t&&(t=[]),void 0===n&&(n=0),!e&&!o(r))throw new Error("DeepCopy: The root should be an object!");if(e||(t.push("if","(","!new.target",")","throw new Error(\"DeepCopy must be invoked with the 'new' operator!\")",";"),a=!1),Array.isArray(r)){if(!r.length)return a=!0,t.push("this",".",e,"=","deepCopy","(","source",".",e,")",";"),t;n++,t.push("this",".",e,"=","[","]",";"),t.push("for","(","let ","i",String(n),"=","0",";","i",String(n),"<","source",".",e,".","length",";","i",String(n),"++",")","{"),s(r[0],e+"[i"+n+"]",t,n),t.push("}")}else if(o(r)){for(var i in e&&t.push("this",".",e,"=","{","}",";"),r)if(Object.prototype.hasOwnProperty.call(r,i))if(o(r[i])||Array.isArray(r[i])){var u=e?e+"."+i:i;s(r[i],u,t,n)}else t.push("this"),e&&t.push(".",e),t.push(".",i,"=","source"),e&&t.push(".",e),t.push(".",i,";")}else t.push("this",".",e,"=","source",".",e,";");return t}},function(r,e,t){"use strict";var n,a=this&&this.__extends||(n=function(r,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,e){r.__proto__=e}||function(r,e){for(var t in e)e.hasOwnProperty(t)&&(r[t]=e[t])})(r,e)},function(r,e){function t(){this.constructor=r}n(r,e),r.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}),o=this&&this.__assign||function(){return(o=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(r,e,t,n){void 0===n&&(n=t),Object.defineProperty(r,n,{enumerable:!0,get:function(){return e[t]}})}:function(r,e,t,n){void 0===n&&(n=t),r[n]=e[t]}),u=this&&this.__setModuleDefault||(Object.create?function(r,e){Object.defineProperty(r,"default",{enumerable:!0,value:e})}:function(r,e){r.default=e}),s=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var e={};if(null!=r)for(var t in r)Object.hasOwnProperty.call(r,t)&&i(e,r,t);return u(e,r),e},c=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.TopSection=e.SectionsContext=void 0;var l=c(t(0)),f=c(t(24)),d=t(51),p=t(3),h=c(t(64)),y=s(t(18)),v=s(t(28)),b=s(t(27)),m=l.default.createContext({updateState:function(){},context:{},fieldComponents:{},sectionComponents:{},styles:{},computations:{},history:{},location:{},match:{}});e.SectionsContext=m;var E=function(r){function e(e){var t=r.call(this,e)||this;return t.state={context:null,parsedSchema:null,data:null,schema:null},t}return a(e,r),e.getDerivedStateFromProps=function(r,e){var t=r.data,n=r.schema,a=e.data,o=e.schema;if(t===a&&n===o)return null;if(n&&p.strictlyIsObject(n)&&t&&p.strictlyIsObject(t)){var i=f.default({dataLink:n,data:t,renderFunctions:y});return{context:i.context,parsedSchema:i.schema,data:t,schema:n}}return null},e.prototype.updateContext=function(r){this.setState({context:r})},e.prototype.render=function(){var r=this.props,e=r.computations,t=r.sectionComponents,n=r.fieldComponents,a=r.data,i=r.schema,u=r.styles,s=r.history,c=r.location,f=r.match,E=o(o(o(o({},e),y),b),v),_=this.state,w=_.context,g=_.parsedSchema;if(!(a&&p.strictlyIsObject(a)&&i&&p.strictlyIsObject(i)))return null;var O={computations:E,sectionComponents:t,fieldComponents:n,updateState:d.getHandler({schema:g,computations:E,updateState:this.updateContext.bind(this)}),context:w,styles:u,history:s,location:c,match:f};return l.default.createElement(m.Provider,{value:O},l.default.createElement(h.default,{parsedSchema:g,level:0}))},e}(l.default.Component);e.TopSection=E},function(r,e,t){"use strict";function n(r){return"[object Object]"===Object.prototype.toString.call(r)}Object.defineProperty(e,"__esModule",{value:!0}),e.isObject=void 0,e.isObject=n,e.default=n},function(r,e,t){"use strict";var n=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.spaceSkipping=e.valueParser=void 0;var a=n(t(43));e.valueParser=a.default;var o=n(t(17));e.spaceSkipping=o.default},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});e.default=function(r){var e,t,a=r.dataLink,o=0;try{for(var i=n(a),u=i.next();!u.done;u=i.next()){var s=u.value;if(o++," "!==s[2])break}}catch(r){e={error:r}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}return" ".repeat(o)}},function(r,e,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(r,e,t,n){void 0===n&&(n=t),Object.defineProperty(r,n,{enumerable:!0,get:function(){return e[t]}})}:function(r,e,t,n){void 0===n&&(n=t),r[n]=e[t]}),a=this&&this.__setModuleDefault||(Object.create?function(r,e){Object.defineProperty(r,"default",{enumerable:!0,value:e})}:function(r,e){r.default=e}),o=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var e={};if(null!=r)for(var t in r)Object.hasOwnProperty.call(r,t)&&n(e,r,t);return a(e,r),e};Object.defineProperty(e,"__esModule",{value:!0}),e.toLowercase=e.toUppercase=e.underScoreToCamelCase=e.toUpperCase=e.firstLetterUpperCase=e.isInRange=e.toString=e.toBoolean=e.toMoneyFormat=e.toNumber=e.andValue=e.orValue=e.ifCondition=e.not=e.or=e.and=e.isEqual=void 0,e.asyncComputations=o(t(27)),e.experimentalComputations=o(t(28)),e.isEqual=function(r,e){return r===e},e.and=function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];for(var t=0;t<r.length;t++)if(!r[t])return!1;return!0},e.or=function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];for(var t=0;t<r.length;t++)if(r[t])return!0;return!1},e.not=function(r){return!r},e.ifCondition=function(r,e,t){return r?e:t},e.orValue=function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];for(var t=0;t<r.length-1;t++)if(r[t])return r[t];return r[r.length-1]},e.andValue=function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];for(var t=0;t<r.length-1;t++)if(!r[t])return r[t];return r[r.length-1]},e.toNumber=function(r){return r=Number(r),Number.isNaN(r)&&(r=0,console.error("[error] toNumber: value must be a number.")),r},e.toMoneyFormat=function(r){return e.toNumber(r).toFixed(2)},e.toBoolean=function(r){return Boolean(r)},e.toString=function(r){return String(r)},e.isInRange=function(r,e){var t=r.range,n=t.min,a=t.max;return e>=n&&e<=a},e.firstLetterUpperCase=function(r){return"string"!=typeof r?(console.error("firstLetterUpperCase: word must be a string."),r):r.substring(0,1).toUpperCase()+r.substring(1).toLowerCase()},e.toUpperCase=function(r){return"string"!=typeof r?(console.error("firstLetterUpperCase: word must be a string."),r):r.toUpperCase()},e.underScoreToCamelCase=function(r){return"string"!=typeof r?(console.error("[error] underScoreOtCamelCase: word must be a string."),r):r.split("_").filter(Boolean).map((function(r){return e.firstLetterUpperCase(r)})).join("")},e.toUppercase=function(r){return"string"!=typeof r?(console.error("[error] toUppercase: word must be a string."),r):r.toUpperCase()},e.toLowercase=function(r){return"string"!=typeof r?(console.error("[error] toUppercase: word must be a string."),r):r.toLowerCase()}},function(r,e,t){"use strict";var n,a=this&&this.__extends||(n=function(r,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,e){r.__proto__=e}||function(r,e){for(var t in e)e.hasOwnProperty(t)&&(r[t]=e[t])})(r,e)},function(r,e){function t(){this.constructor=r}n(r,e),r.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(r){function e(){var e=this,t="Promise chain is broken!";return(e=r.call(this,t)||this).message=t,e}return a(e,r),e}(Error);e.default=o},function(r,e,t){"use strict";var n=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.spaceSkipping=e.valueParser=void 0;var a=n(t(54));e.valueParser=a.default;var o=n(t(21));e.spaceSkipping=o.default},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});e.default=function(r){var e,t,a=r.dataLink,o=0;try{for(var i=n(a),u=i.next();!u.done;u=i.next()){var s=u.value;if(o++," "!==s[2])break}}catch(r){e={error:r}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}return" ".repeat(o)}},function(r,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.createChangeEmitter=function(){var r=[],e=r;function t(){e===r&&(e=r.slice())}return{listen:function(r){if("function"!=typeof r)throw new Error("Expected listener to be a function.");var n=!0;return t(),e.push(r),function(){if(n){n=!1,t();var a=e.indexOf(r);e.splice(a,1)}}},emit:function(){for(var t=r=e,n=0;n<t.length;n++)t[n].apply(t,arguments)}}}},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var o=t(13),i=function(r){return"[object Object]"===Object.prototype.toString.call(r)},u=function(r){return i(r)||Array.isArray(r)},s=function(r){return u(r)?o.deepCopy(r):r},c=function(r,e,t){var o,i;try{for(var c=a(t),f=c.next();!f.done;f=c.next()){var d=f.value;if(Object.prototype.hasOwnProperty.call(e,d))if(r[d]){var p=void 0;p=u(r[d].value)||u(e[d].value)?l(r[d].value,e[d].value):e[d].value,r[d]=n(n({},e[d]),{value:p})}else r[d]=n(n({},e[d]),{value:s(e[d].value)})}}catch(r){o={error:r}}finally{try{f&&!f.done&&(i=c.return)&&i.call(c)}finally{if(o)throw o.error}}return r},l=function(r,e){var t,n,o,u;if(i(r)&&i(e)){var l=Object.getOwnPropertyDescriptors(e),f=Object.getOwnPropertyDescriptors(r);return c(f,l,Object.getOwnPropertyNames(l)),c(f,l,Object.getOwnPropertySymbols(l)),Object.create({},f)}if(Array.isArray(r)&&Array.isArray(e)){var d=[];try{for(var p=a(r),h=p.next();!h.done;h=p.next()){var y=h.value;d.push(s(y))}}catch(r){t={error:r}}finally{try{h&&!h.done&&(n=p.return)&&n.call(p)}finally{if(t)throw t.error}}try{for(var v=a(e),b=v.next();!b.done;b=v.next()){y=b.value;d.push(s(y))}}catch(r){o={error:r}}finally{try{b&&!b.done&&(u=v.return)&&u.call(v)}finally{if(o)throw o.error}}return d}throw new Error("[error] deepMerge: destination object and source object must be arrays or objects and the same type.\nA "+Object.prototype.toString.call(r)+" of the destination object and a "+Object.prototype.toString.call(e)+" of the source object are given.")};e.default=l},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(r,e,t,n){void 0===n&&(n=t),Object.defineProperty(r,n,{enumerable:!0,get:function(){return e[t]}})}:function(r,e,t,n){void 0===n&&(n=t),r[n]=e[t]}),o=this&&this.__setModuleDefault||(Object.create?function(r,e){Object.defineProperty(r,"default",{enumerable:!0,value:e})}:function(r,e){r.default=e}),i=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var e={};if(null!=r)for(var t in r)Object.hasOwnProperty.call(r,t)&&a(e,r,t);return o(e,r),e},u=this&&this.__rest||function(r,e){var t={};for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&e.indexOf(n)<0&&(t[n]=r[n]);if(null!=r&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(r);a<n.length;a++)e.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(r,n[a])&&(t[n[a]]=r[n[a]])}return t},s=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},c=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.parseSchemaFields=e.simpleDataParser=e.dataParser=e.templateDeleteInfo=e.templateAddInfo=void 0;var l=t(3),f=t(5),d=c(t(9)),p=i(t(18)),h=t(6),y=c(t(50)),v=c(t(23)),b=t(29);Object.defineProperty(e,"simpleDataParser",{enumerable:!0,get:function(){return b.simpleDataParser}}),Object.defineProperty(e,"parseSchemaFields",{enumerable:!0,get:function(){return b.parseSchemaFields}});var m=Symbol.for("_objectId_"),E=new y.default,_=[],w=function(r){r.renderFunctions=r.renderFunctions||w.renderFunctions||{};var e=r.data;e||(e={});var t=r.rootData,a=r.dataPath,o=r.schemaPath;if(t||(t=e),a){if("string"!=typeof a||!/^@\//.test(a))throw new Error("DataParserV4: dataPath must be a string and starts with '@/' symbols.")}else a="@/";if(o){if(!Array.isArray(o))throw new Error("DataParserV4: schemaPath must be a string and starts with '#/' symbols.")}else o=[];var i={};return{schema:g(n(n({},r),{rootData:t,dataPath:a,schemaPath:o,context:i})),context:i}};e.dataParser=w,w.renderFunctions=p;var g=function(r){var e=r.dataLink,t=r.data;return void 0===e?t:l.strictlyIsObject(e)?e._template_?j(r):P(r):Array.isArray(e)?O(r):"string"==typeof e&&e&&f.isDataLink(e)?x(r):e},O=function(r,e){void 0===e&&(e=null);var t=r.dataLink;if(!Array.isArray(t))throw new Error("DataParserV4: dataLink should be an array");for(var a=new Array(t.length),o=0;o<t.length;o++)switch(l.strictlyIsObject(t[o])&&(t[o]=Object.create({},n(n({},Object.getOwnPropertyDescriptors(t[o])),{_objectId_:{value:E.get(),writable:!1,enumerable:!1},_index_:{value:o,writable:!1,enumerable:!1}}))),e){case"fieldsMode":if(!l.strictlyIsObject(t[o]))throw new Error("DataLinkParserV4: array item must be an object (fields mode).");a[o]=R(n(n({},r),{dataLink:t[o]}));break;case"sectionsMode":if(!l.strictlyIsObject(t[o]))throw new Error("DataLinkParserV4: array item must be an object (sections mode).");a[o]=P(n(n({},r),{dataLink:t[o]}));break;default:a[o]=g(n(n({},r),{dataLink:t[o]}))}return a},P=function(r){var e,t,a,o=r.dataLink,i=r.dataPath,c=r.rootData,f=r.data,d=o._sections_,p=o._fields_,h=o._dataLink_,y=o._defaultData_,b=o._objectId_,m=u(o,["_sections_","_fields_","_dataLink_","_defaultData_","_objectId_"]);if(y){var _=l.isEmpty(f)?y:v.default(y,f);f===c&&(c=_),f=_}h&&(f=(e=A(n(n({},r),{data:f,rootData:c,dataLink:h}))).data,i=e.dataPath);var w=Object.create({},n(n({},Object.getOwnPropertyDescriptors(m)),{_objectId_:{value:b||E.get(),writable:!1,enumerable:!1}}));if(d)if(l.strictlyIsObject(d))w._sections_=j(n(n({},r),{dataLink:d,data:f,rootData:c,dataPath:i}),"sectionsMode");else{if(!Array.isArray(d))throw new Error("DataParserV4: _sections_ must be an array or an object.");w._sections_=O(n(n({},r),{dataLink:d,data:f,rootData:c,dataPath:i}),"sectionsMode")}if(p)if(l.strictlyIsObject(p))w._fields_=j(n(n({},r),{dataLink:p,data:f,rootData:c,dataPath:i}),"fieldsMode");else{if(!Array.isArray(p))throw new Error("DataParserV4: _fields_ must be an array or an object.");w._fields_=O(n(n({},r),{dataLink:p,data:f,rootData:c,dataPath:i}),"fieldsMode")}try{for(var P=s(Object.getOwnPropertyNames(m)),R=P.next();!R.done;R=P.next()){var S=R.value;w[S]=g(n(n({},r),{dataLink:m[S],data:f,rootData:c,dataPath:i}))}}catch(r){t={error:r}}finally{try{R&&!R.done&&(a=P.return)&&a.call(P)}finally{if(t)throw t.error}}return w},R=function(r){var e,t,a=r.dataLink,o=r.context,i=a,c=i._value_,d=i._objectId_,p=i._computations_,h=i._sections_,y=i._fields_,v=u(i,["_value_","_objectId_","_computations_","_sections_","_fields_"]);if(h||y)throw new Error("DataParserV4: field must be the end point object of a schema.");var b=Object.create({},n(n({},Object.getOwnPropertyDescriptors(v)),{_objectId_:{value:d||E.get(),writable:!1,enumerable:!1}}));try{for(var m=s(Object.getOwnPropertyNames(v)),_=m.next();!_.done;_=m.next()){var w=_.value;b[w]=g(n(n({},r),{dataLink:a[w]}))}}catch(r){e={error:r}}finally{try{_&&!_.done&&(t=m.return)&&t.call(m)}finally{if(e)throw e.error}}if(c){if("string"!=typeof c)throw new Error("DataParserV4: _value_ must be a syntax string or a simple string.");if(f.isDataLink(c)){if(!f.isLink(c)&&!f.isFunctionCall(c))throw new Error("DataParserV4: _value_ of field must be a simple link or a function call.");b._value_=x(n(n({},r),{dataLink:c}))}else b._value_=c}if(o[Symbol.for(b._objectId_)]={},l.strictlyIsObject(p)){if(l.isFunction(c))throw new Error("DataParserV4: Render function in _value_ is allowed only in passive field.");b._computations_=S(n(n({},r),{dataLink:p}))}return b},S=function(r){var e,t,a=r.dataLink,o=a._handlers_,i=void 0===o?{}:o,u=a._after_,c=void 0===u?[]:u,l=Object.getOwnPropertyNames(i);if(!l.length)return{};var d={_handlers_:{},_after_:[]};try{for(var p=s(l),h=p.next();!h.done;h=p.next()){var y=h.value;if(Array.isArray(i[y])&&i[y].length)d._handlers_[y]=D(n(n({},r),{dataLink:i[y]}));else{if("string"!=typeof i[y]||!f.isFunctionCall(i[y]))throw new Error("DataParserV4: List of computations must be a non empty array, an object or a renderFunction string.");d._handlers_[y]=x(n(n({},r),{dataLink:i[y]}))}}}catch(r){e={error:r}}finally{try{h&&!h.done&&(t=p.return)&&t.call(p)}finally{if(e)throw e.error}}if(Array.isArray(c)&&c.length)d._after_=D(n(n({},r),{dataLink:c}));else if("string"==typeof c&&f.isFunctionCall(c))d._after_=[x(n(n({},r),{dataLink:c}))];else if(!Array.isArray(c))throw new Error("DataParserV4: Computation must be a renderFunction string (_after_).");return d},D=function(r){var e,t,a=r.dataLink,o=[];try{for(var i=s(a),u=i.next();!u.done;u=i.next()){var c=u.value;if(l.strictlyIsObject(c))o.push(P(n(n({},r),{dataLink:c})));else{if("string"!=typeof c)throw new Error("DataParserV4: action must be a dataLink string or a value object.");o.push(x(n(n({},r),{dataLink:c})))}}}catch(r){e={error:r}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}return o},j=function(r,e){void 0===e&&(e=null);var t=r.dataLink,a=r.rootData,o=r.context,i=r.meta,u=r.tokens,s=void 0===u?{}:u,c=t._template_,d=t._dataLink_;if(!c)throw new Error("DataParserV4: schema template should be provided.");if(("sectionsMode"===e||"fieldsMode"===e)&&!l.strictlyIsObject(c))throw new Error("DataParserV4: template must be an object ("+e+").");if(!d||"string"!=typeof d||!f.isLink(d))throw new Error("DataParserV4: template must be provided with a _dataLink_ field and it should be a link.");if(d.endsWith(">")){var p=d.split("/").pop(),h=p.substring(1,p.length-1);_.push(h)}var y=A(n(n({},r),{dataLink:d}),!0),v=y.data,b=y.dataPath;if(!Array.isArray(v))throw new Error("DataParserV4: data for a template must be an array.");Object.prototype.hasOwnProperty.call(o,Symbol.for(b))||(o[Symbol.for(b)]={dataPath:b,schemaTemplate:c});for(var w=[],O=0;O<v.length;O++){var S=v[O];if(!l.strictlyIsObject(S)&&!Array.isArray(S))throw new Error("DataParserV4: each template data item must be an object or an array.");var D=E.get();S[m]=D;var j=void 0;switch(j=l.strictlyIsObject(c)?Object.create({},n(n({},Object.getOwnPropertyDescriptors(c)),{_objectId_:{value:D,writable:!1,enumerable:!1},_index_:{value:O,writable:!1,enumerable:!1}})):c,r=n(n({},r),{dataLink:j,data:S,rootData:a,dataPath:C({dataPath:b,middle:D,link:"@"}),meta:n(n({},i),{templateDataLink:b,currentTemplateId:D}),tokens:n(n({},s),S)}),e){case"fieldsMode":w.push(R(r));break;case"sectionsMode":w.push(P(r));break;default:w.push(g(r))}}return w},x=function(r){var e,t,n=r.data,a=r.rootData,o=r.dataPath,i=r.context,u=r.tokens,c=r.renderFunctions,l=r.dataLink;if(!f.isDataLink(l))throw new Error("DataParserV4: dataLink must be a syntax string.");var p=d.default(l),y=p.containsLinks()?p.extractLinks():[];if(y.length)try{for(var v=s(y),b=v.next();!b.done;b=v.next()){var m=b.value,E=d.default(m),_=h.linkParser({dataLink:E,data:n,rootData:a,tokens:u,renderFunctions:c});if(/[/@]:[a-zA-Z0-9_]+\//.test(m)){var w=k(m,u,m.startsWith("@/")?a:n,o);l=l.replace(m,w),m=w}var g=f.isRootLink(m)?m:C({dataPath:o,link:m});void 0!==_&&(i[g]=_);var O=g.replace(/(?<!\\)([@/])/g,"\\$1");l=l.replace(m,"@"+O)}}catch(r){e={error:r}}finally{try{b&&!b.done&&(t=v.return)&&t.call(v)}finally{if(e)throw e.error}}return l},k=function(r,e,t,n){var a=r.substring(1).split("/").filter(Boolean),o=N(a,e,t).join("/");return r.startsWith("@/")?"@/"+o:C({dataPath:n,link:"@"+o})},N=function(r,e,t){var n=[];return r.reduce((function(r,t){if(t.startsWith(":")){var n=t.substring(1);if(t=e[n],r.data=r.data[t],_.includes(n)){if(!Object.prototype.hasOwnProperty.call(r.data,m))throw new Error("DataParserV4: object must contain _objectId_ param.");r.newParts.push(r.data[m])}else r.newParts.push(t);return r}return r.data=r.data[t],r.newParts.push(t),r}),{newParts:n,data:t}),n},C=function(r){var e=r.dataPath,t=r.link,n=void 0===t?"":t,a=r.middle;return f.isRootLink(n)?n:(e||(e="@/"),(e+"/"+(a?a+"/":"")+n.substring(1)).replace(/\/{2,}/,"/"))},A=function(r,e){void 0===e&&(e=!1);var t=r.dataLink,n=r.rootData,a=r.context,o=r.renderFunctions,i=r.tokens,u=r.data,s=r.dataPath;if("string"!=typeof t||!f.isLink(t))throw new Error("DataParserV4: _dataLink_ must be a simple Link.");var c=/<[a-zA-Z0-9_]+>$/.test(t)?t.replace(/\/<.+>$/,""):t;return s=C({dataPath:s,link:c}),u=h.linkParser({dataLink:d.default(t),data:u,rootData:n,renderFunctions:o,tokens:i}),e&&!Object.prototype.hasOwnProperty.call(a,s)&&(a[c]=u),{dataPath:s,data:u}};e.templateAddInfo=function(r){var e=r.dataPath,t=void 0===e?"@/":e,n=r.template;if(!t||"string"!=typeof t||!f.isLink(t))throw new Error("DataParserV4: dataPath must be a string.");if(!l.strictlyIsObject(n))throw new Error("DataParserV4: template must be an object.");return w({dataLink:n,dataPath:t,data:{}})},e.templateDeleteInfo=function(r,e){return r&&"string"==typeof r&&f.isLink(r)?Object.keys(e).filter((function(e){return e.startsWith(r)})):[]},e.default=w},function(r,e,t){"use strict";var n=this&&this.__read||function(r,e){var t="function"==typeof Symbol&&r[Symbol.iterator];if(!t)return r;var n,a,o=t.call(r),i=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(r){a={error:r}}finally{try{n&&!n.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spread||function(){for(var r=[],e=0;e<arguments.length;e++)r=r.concat(n(arguments[e]));return r};Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function r(e){if("string"!=typeof e||!e.trim())throw new Error("DataLink: The dataLink must be a not empty string!");this.string=e.trim(),this.processingString=a([r.START],this.string,[r.END]),this.reset()}return r.prototype.size=function(){return this.string.length},r.prototype.containsLinks=function(){return/(?!<\\)@/.test(this.string)},r.prototype.extractLinks=function(){return this.string.match(/(?!<\\)(@[a-zA-Z0-9<>_\\:/.-]*)/g)},r.prototype.getCursorPositionInfo=function(){var r=this.string,e=this.getCurrentValue()[1],t=this.isEnd(),n=this.getCurrentIndex();return r.slice(0,n)+"*>"+e+"<*"+(t?"":r.slice(n+1,r.length))},r.prototype.getNextValue=function(){return this.pause?(this.pause=!1,this.currentValue):this.current>this.string.length?void 0:(this.current++,this.currentValue[0]=this.currentValue[1],this.currentValue[1]=this.currentValue[2],this.currentValue[2]=this.processingString[this.current+1],this.currentValue)},r.prototype.reset=function(){this.current=1,this.currentValue=[this.processingString[0],this.processingString[1],this.processingString[2]],this.iteratorValue={value:this.currentValue,done:!1}},r.prototype.getCurrentIndex=function(){return this.current?this.current-1:0},r.prototype.getCurrentValue=function(){return this.currentValue},r.prototype.isStart=function(){return this.currentValue[0]===r.START},r.prototype.isEnd=function(){return this.currentValue[2]===r.END},r.prototype.valueOf=function(){return this.string},r.prototype.toString=function(){return this.string},r.prototype.next=function(){return this.current>this.string.length?{value:void 0,done:!0}:(this.iteratorValue.value=this.getNextValue(),this.iteratorValue)},r.prototype[Symbol.iterator]=function(){return this.pause=!0,this},r.START="",r.END="",r}();e.default=o},function(r,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n={null:null,false:!1,true:!0};e.default=function(r){return"string"==typeof r&&n.hasOwnProperty(r)?n[r]:r}},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.delay=e.debounce=e.applyFilters=e.runAction=e.updateContext=e.setValue=e.overrideInputValue=e.breakAction=e.log=void 0;var i=o(t(19));e.log=function(r,e){return void 0===r&&(r=null),void 0===e&&(e=null),function(t,n){if(r&&"string"!=typeof r)throw new Error("[error] log computation: marker must be a string.");return console.warn("[debug] "+(r||"log computation")+":",{input:t,env:n,additional:e}),t}},e.breakAction=function(){return function(){throw new i.default}},e.overrideInputValue=function(r,e){return function(){return{dataLink:r="@"+r,value:e}}},e.setValue=function(){return function(r,e){var t=e.context,n=(e.currentSchemaObject,r.dataLink),a=r.value;return t[n]=a,r}},e.updateContext=function(){return function(r,e){return(0,e.updateState)(e.context),r}},e.runAction=function(){return function(r,e){var t=r.value;if(Array.isArray(t)){if(!t.length)throw new Error("[error] runAction: array of function can not be empty.");return t.reduce((function(r,t){return"function"!=typeof t?r.then((function(){throw new Error("[error] runAction: array mus contain a list of functions. The type '"+typeof t+" is given.'")})):r.then((function(r){return t(r,e)}))}),Promise.resolve({}))}if("function"!=typeof t)throw new Error("[error] runAction: input.value must be a function.");return t({},e)}},e.applyFilters=function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];return function(e){var t,o;if(!r.length)return e;var i=e.value;try{for(var u=a(r),s=u.next();!s.done;s=u.next()){var c=s.value;if("function"!=typeof c)throw Error("[error] applyFilters: filter must be a function.");i=c(i)}}catch(r){t={error:r}}finally{try{s&&!s.done&&(o=u.return)&&o.call(u)}finally{if(t)throw t.error}}return n(n({},e),{value:i})}};var u=new Map;e.debounce=function(r,e){if("function"!=typeof r)throw new Error("[error] debounce: The computation must be a function.");if(e=Number(e),Number.isNaN(e))throw new Error("[error] debounce: The time must be a number.");return function(t,n){return new Promise((function(a,o){var s=n.currentSchemaObject._objectId_;if(!Number.isInteger(s))throw new Error("[error] debounce: The key must be a number.");var c=function(r){a(r),u.delete(s)},l=function(r){o(r),u.delete(s)};if(u.has(s)){var f=u.get(s),d=f.reject,p=f.timeoutId;d(new i.default),clearTimeout(p),u.delete(s)}var h=setTimeout((function(){try{var e=r(t,n);e instanceof Promise?e.then(c,l):c(e)}catch(r){l(r)}}),e);u.set(s,{reject:o,timeoutId:h})}))}},e.delay=function(r){if(void 0===r&&(r=0),r=Number(r),Number.isNaN(r))throw new Error("[error] Delay: delay value must be a number.");return function(e,t){return new Promise((function(t){return setTimeout((function(){return t(e)}),r)}))}}},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.generatorComputation2=e.generatorComputation=e.sectionsDidMountProcessor=void 0;var o=t(3);e.sectionsDidMountProcessor=function(r){return function(e,t){if("function"!=typeof r)throw new Error("processor must be a function.");if("function"!=typeof t)throw new Error("setState must be a function.");if(!Array.isArray(e))throw new Error("Sections list must be an array.");for(var a=[],i=[],u=function(r){if(!o.strictlyIsObject(e[r]))throw new Error("Section must be an Object.");var t=null,u=new Promise((function(r){t=r}));a.push(u);var s=Object.create({},n(n({},Object.getOwnPropertyDescriptors(e[r])),{resolve:{value:t,enumerable:!1}}));i.push(s)},s=0;s<e.length;s++)u(s);return Promise.all(a).then((function(e){var n=r(e);if(n instanceof Promise)return n.then((function(r){t(r)}));t(n)})).catch((function(r){return console.error(r)})),i}},e.generatorComputation=function(){return function(r,e){var t,o;return a(this,(function(e){switch(e.label){case 0:return[4,Promise.resolve("liave")];case 1:return t=e.sent(),[4,new Promise((function(r,e){setTimeout((function(){return r(t+"_liave2")}),1e4)}))];case 2:return o=e.sent(),[2,n(n({},r),{value:o})]}}))}},e.generatorComputation2=function(){return function(r,e){var t;return a(this,(function(e){switch(e.label){case 0:return[4,Promise.resolve("value")];case 1:return t=e.sent(),[2,new Promise((function(e,a){setTimeout((function(){return e(n(n({},r),{value:t+"_value2"}))}),1e4)}))]}}))}}},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__rest||function(r,e){var t={};for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&e.indexOf(n)<0&&(t[n]=r[n]);if(null!=r&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(r);a<n.length;a++)e.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(r,n[a])&&(t[n[a]]=r[n[a]])}return t},o=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.parseSchemaFields=e.simpleDataParser=void 0;var u=t(3),s=i(t(7)),c=i(t(9)),l=t(5);e.parseSchemaFields=function(r,e,t){var a,i,u=n({},r);try{for(var f=o(Object.getOwnPropertyNames(u)),d=f.next();!d.done;d=f.next()){var p=d.value;"string"==typeof u[p]&&l.isDataLink(u[p])&&(u[p]=s.default({dataLink:c.default(u[p]),data:e,renderFunctions:t}))}}catch(r){a={error:r}}finally{try{d&&!d.done&&(i=f.return)&&i.call(f)}finally{if(a)throw a.error}}return u};e.simpleDataParser=function(r){var e=r.data,t=r.rootData;return t||(t=e),f(n(n({},r),{rootData:t}))};var f=function(r){var e=r.dataLink,t=r.data;return void 0===e?t:u.isEmpty(t)?null:u.strictlyIsObject(e)?p(r):Array.isArray(e)?d(r):"string"==typeof e?s.default(n(n({},r),{dataLink:c.default(e)})):e},d=function(r){for(var e=r.dataLink,t=new Array(e.length),a=0;a<e.length;a++)t[a]=f(n(n({},r),{dataLink:e[a]}));return t},p=function(r){var e,t,i=r.dataLink,u=r.data,c=i._dataLink_,l=(i._computations_,i._template_,i._sections_,i._fields_,a(i,["_dataLink_","_computations_","_template_","_sections_","_fields_"]));c&&"string"==typeof c&&(u=s.default(n(n({},r),{dataLink:c})));var d={};try{for(var p=o(Object.getOwnPropertyNames(l)),y=p.next();!y.done;y=p.next()){var v=y.value;d[h(n(n({},r),{dataLink:v}))]=f(n(n({},r),{dataLink:l[v],data:u}))}}catch(r){e={error:r}}finally{try{y&&!y.done&&(t=p.return)&&t.call(p)}finally{if(e)throw e.error}}return d},h=function(r){var e=r.dataLink;if(l.isDataLink(e)&&"string"!=typeof(e=s.default(n(n({},r),{dataLink:c.default(e)}))))throw new Error('[error] simpleDataParser: key should be a string! A "'+typeof e+'" is given.');return e}},function(r,e,t){"use strict";var n,a=this&&this.__extends||(n=function(r,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,e){r.__proto__=e}||function(r,e){for(var t in e)e.hasOwnProperty(t)&&(r[t]=e[t])})(r,e)},function(r,e){function t(){this.constructor=r}n(r,e),r.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(r){function e(e){void 0===e&&(e="");var t=r.call(this,e)||this;return t.message=e,t}return a(e,r),e}(Error);e.default=o},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},o=this&&this.__rest||function(r,e){var t={};for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&e.indexOf(n)<0&&(t[n]=r[n]);if(null!=r&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(r);a<n.length;a++)e.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(r,n[a])&&(t[n[a]]=r[n[a]])}return t},i=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},u=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.MODE=e.genDataParser=e.syncDataParser=e.asyncDataParser=void 0;var s=u(t(10)),c=u(t(61)),l=t(5),f=u(t(32)),d={USER_SHALLOW:9,CORE_SHALLOW:10,FULL_SHALLOW:11,USER_DEEP:13,CORE_DEEP:14,FULL_DEEP:15};function p(r){var e,t,o;return a(this,(function(a){switch(a.label){case 0:return e=r.dataLink,t=r.mode,o=12&t||12,"string"!=typeof e?[3,2]:[5,i(s.default(n(n({},r),{dataLink:c.default(e)})))];case 1:return[2,a.sent()];case 2:return l.isObject(e)?8===o?[2,e]:[5,i(y(r))]:[3,4];case 3:return[2,a.sent()];case 4:return Array.isArray(e)?8===o?[2,e]:[5,i(h(r))]:[3,6];case 5:return[2,a.sent()];case 6:return void 0===e?(console.warn("[warning] dataParserV5: dataLink is undefined."),[2,void 0]):[2,e];case 7:return[2]}}))}function h(r){var e,t,o,u,s;return a(this,(function(a){switch(a.label){case 0:e=r.dataLink,t=new Array(e.length),o=0,a.label=1;case 1:return o<e.length?(u=t,s=o,[5,i(p(n(n({},r),{dataLink:e[o]})))]):[3,4];case 2:u[s]=a.sent(),a.label=3;case 3:return o++,[3,1];case 4:return[2,t]}}))}function y(r){var e,t,u,s,c,l,f,h,y,v,b,m,E,_,w,g,O,P,R,S,D,j,x,k,N,C;return a(this,(function(a){switch(a.label){case 0:return e=r.dataLink,t=r.mode,u=3&t||3,s=r.data,c=e._dataLink_,e._computations_,l=e._template_,f=o(e,["_dataLink_","_computations_","_template_"]),c?[5,i(p(n(n({},r),{dataLink:c,mode:d.USER_DEEP})))]:[3,2];case 1:s=a.sent(),a.label=2;case 2:if(!l)return[3,11];if(!Array.isArray(s))throw new Error("[error] dataParserV5: data must be an array.");h=[],a.label=3;case 3:a.trys.push([3,8,9,10]),y=i(s),v=y.next(),a.label=4;case 4:return v.done?[3,7]:(b=v.value,E=(m=h).push,[5,i(p(n(n({},r),{dataLink:l,data:b})))]);case 5:E.apply(m,[a.sent()]),a.label=6;case 6:return v=y.next(),[3,4];case 7:return[3,10];case 8:return _=a.sent(),x={error:_},[3,10];case 9:try{v&&!v.done&&(k=y.return)&&k.call(y)}finally{if(x)throw x.error}return[7];case 10:return[2,h];case 11:w={},a.label=12;case 12:a.trys.push([12,18,19,20]),g=i(Object.getOwnPropertyNames(f)),O=g.next(),a.label=13;case 13:if(O.done)return[3,17];if(P=O.value,3!==u){if("_"===P[0]&&"_"===P[P.length-1]&&1===u)return[3,16];if(("_"!==P[0]||"_"===P[P.length-1])&&2===u)return[3,16]}return[5,i(p(n(n({},r),{dataLink:P,data:s})))];case 14:if("string"!=typeof(R=a.sent()))throw new Error("[error] dataParserV5: parsedKey must be a string.");return S=w,D=R,[5,i(p(n(n({},r),{dataLink:e[P],data:s})))];case 15:S[D]=a.sent(),a.label=16;case 16:return O=g.next(),[3,13];case 17:return[3,20];case 18:return j=a.sent(),N={error:j},[3,20];case 19:try{O&&!O.done&&(C=g.return)&&C.call(g)}finally{if(N)throw N.error}return[7];case 20:return[2,w]}}))}e.MODE=d,e.asyncDataParser=function(r){var e=r.schema,t=r.data,n=r.rootData,a=r.defaultData,o=r.functions,i=r.tokens,u=r.mode,s=void 0===u?d.FULL_DEEP:u;return new Promise((function(r,u){n||(n=t);var c=p({dataLink:e,data:t,rootData:n,functions:o,mode:s,tokens:i,defaultData:a});f.default(c,r,u)}))},e.syncDataParser=function(r){var e=r.schema,t=r.data,n=r.rootData,a=r.defaultData,o=r.functions,i=r.tokens,u=r.mode;n||(n=t);for(var s,c=p({dataLink:e,data:t,rootData:n,functions:o,mode:void 0===u?d.FULL_DEEP:u,tokens:i,defaultData:a});;){var l=c.next(s),f=l.done,h=l.value;if(s=h,f)return h}},e.genDataParser=function(r){var e=r.schema,t=r.data,n=r.rootData,o=r.defaultData,u=r.functions,s=r.tokens,c=r.mode,l=void 0===c?d.FULL_DEEP:c;return a(this,(function(r){switch(r.label){case 0:return n||(n=t),[5,i(p({dataLink:e,data:t,rootData:n,functions:u,mode:l,tokens:s,defaultData:o}))];case 1:return[2,r.sent()]}}))}},function(r,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(r,e,t){var n=function(a){try{var o=r.next(a),i=o.value;o.done?i instanceof Promise?i.then(e,t):e(i):i instanceof Promise?i.then(n,t):n(i)}catch(r){t(r)}};n()}},function(r,e,t){"use strict";t.r(e),t.d(e,"mapProps",(function(){return g})),t.d(e,"withProps",(function(){return O})),t.d(e,"withPropsOnChange",(function(){return R})),t.d(e,"withHandlers",(function(){return D})),t.d(e,"defaultProps",(function(){return j})),t.d(e,"renameProp",(function(){return k})),t.d(e,"renameProps",(function(){return C})),t.d(e,"flattenProp",(function(){return A})),t.d(e,"withState",(function(){return L})),t.d(e,"withStateHandlers",(function(){return T})),t.d(e,"withReducer",(function(){return I})),t.d(e,"branch",(function(){return M})),t.d(e,"renderComponent",(function(){return U})),t.d(e,"renderNothing",(function(){return B})),t.d(e,"shouldUpdate",(function(){return $})),t.d(e,"pure",(function(){return K})),t.d(e,"onlyUpdateForKeys",(function(){return W})),t.d(e,"onlyUpdateForPropTypes",(function(){return Y})),t.d(e,"withContext",(function(){return X})),t.d(e,"getContext",(function(){return J})),t.d(e,"lifecycle",(function(){return H})),t.d(e,"toClass",(function(){return Z})),t.d(e,"toRenderProps",(function(){return q})),t.d(e,"fromRenderProps",(function(){return Q})),t.d(e,"setStatic",(function(){return m})),t.d(e,"setPropTypes",(function(){return rr})),t.d(e,"setDisplayName",(function(){return E})),t.d(e,"compose",(function(){return er})),t.d(e,"getDisplayName",(function(){return _})),t.d(e,"wrapDisplayName",(function(){return w})),t.d(e,"shallowEqual",(function(){return u.a})),t.d(e,"isClassComponent",(function(){return z})),t.d(e,"createSink",(function(){return tr})),t.d(e,"componentFromProp",(function(){return nr})),t.d(e,"nest",(function(){return ar})),t.d(e,"hoistStatics",(function(){return or})),t.d(e,"componentFromStream",(function(){return lr})),t.d(e,"componentFromStreamWithConfig",(function(){return cr})),t.d(e,"mapPropsStream",(function(){return pr})),t.d(e,"mapPropsStreamWithConfig",(function(){return dr})),t.d(e,"createEventHandler",(function(){return yr})),t.d(e,"createEventHandlerWithConfig",(function(){return hr})),t.d(e,"setObservableConfig",(function(){return ur}));var n=t(0),a=t.n(n);function o(){return(o=Object.assign||function(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}).apply(this,arguments)}var i=t(11),u=t.n(i);function s(r,e){r.prototype=Object.create(e.prototype),r.prototype.constructor=r,r.__proto__=e}function c(){var r=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=r&&this.setState(r)}function l(r){this.setState(function(e){var t=this.constructor.getDerivedStateFromProps(r,e);return null!=t?t:null}.bind(this))}function f(r,e){try{var t=this.props,n=this.state;this.props=r,this.state=e,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(t,n)}finally{this.props=t,this.state=n}}function d(r){var e=r.prototype;if(!e||!e.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof r.getDerivedStateFromProps&&"function"!=typeof e.getSnapshotBeforeUpdate)return r;var t=null,n=null,a=null;if("function"==typeof e.componentWillMount?t="componentWillMount":"function"==typeof e.UNSAFE_componentWillMount&&(t="UNSAFE_componentWillMount"),"function"==typeof e.componentWillReceiveProps?n="componentWillReceiveProps":"function"==typeof e.UNSAFE_componentWillReceiveProps&&(n="UNSAFE_componentWillReceiveProps"),"function"==typeof e.componentWillUpdate?a="componentWillUpdate":"function"==typeof e.UNSAFE_componentWillUpdate&&(a="UNSAFE_componentWillUpdate"),null!==t||null!==n||null!==a){var o=r.displayName||r.name,i="function"==typeof r.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+o+" uses "+i+" but also contains the following legacy lifecycles:"+(null!==t?"\n  "+t:"")+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof r.getDerivedStateFromProps&&(e.componentWillMount=c,e.componentWillReceiveProps=l),"function"==typeof e.getSnapshotBeforeUpdate){if("function"!=typeof e.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");e.componentWillUpdate=f;var u=e.componentDidUpdate;e.componentDidUpdate=function(r,e,t){var n=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:t;u.call(this,r,e,n)}}return r}function p(r,e){if(null==r)return{};var t,n,a={},o=Object.keys(r);for(n=0;n<o.length;n++)t=o[n],e.indexOf(t)>=0||(a[t]=r[t]);return a}c.__suppressDeprecationWarning=!0,l.__suppressDeprecationWarning=!0,f.__suppressDeprecationWarning=!0;var h=t(34),y=t.n(h),v=t(22),b=t(12),m=function(r,e){return function(t){return t[r]=e,t}},E=function(r){return m("displayName",r)},_=function(r){return"string"==typeof r?r:r?r.displayName||r.name||"Component":void 0},w=function(r,e){return e+"("+_(r)+")"},g=function(r){return function(e){var t=Object(n.createFactory)(e);return function(e){return t(r(e))}}},O=function(r){return g((function(e){return o({},e,"function"==typeof r?r(e):r)}))},P=function(r,e){for(var t={},n=0;n<e.length;n++){var a=e[n];r.hasOwnProperty(a)&&(t[a]=r[a])}return t},R=function(r,e){return function(t){var a=Object(n.createFactory)(t),i="function"==typeof r?r:function(e,t){return!u()(P(e,r),P(t,r))},c=function(r){function t(){for(var t,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(t=r.call.apply(r,[this].concat(a))||this).state={computedProps:e(t.props),prevProps:t.props},t}return s(t,r),t.getDerivedStateFromProps=function(r,t){return i(t.prevProps,r)?{computedProps:e(r),prevProps:r}:{prevProps:r}},t.prototype.render=function(){return a(o({},this.props,this.state.computedProps))},t}(n.Component);return d(c),c}},S=function(r,e){var t={};for(var n in r)r.hasOwnProperty(n)&&(t[n]=e(r[n],n));return t},D=function(r){return function(e){var t=Object(n.createFactory)(e);return function(e){function n(){for(var t,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(t=e.call.apply(e,[this].concat(a))||this).handlers=S("function"==typeof r?r(t.props):r,(function(r){return function(){var e=r(t.props);return e.apply(void 0,arguments)}})),t}return s(n,e),n.prototype.render=function(){return t(o({},this.props,this.handlers))},n}(n.Component)}},j=function(r){return function(e){var t=Object(n.createFactory)(e),a=function(r){return t(r)};return a.defaultProps=r,a}},x=function(r,e){for(var t=o({},r),n=0;n<e.length;n++){var a=e[n];t.hasOwnProperty(a)&&delete t[a]}return t},k=function(r,e){return g((function(t){var n;return o({},x(t,[r]),((n={})[e]=t[r],n))}))},N=Object.keys,C=function(r){return g((function(e){return o({},x(e,N(r)),(t=P(e,N(r)),n=function(e,t){return r[t]},N(t).reduce((function(r,e){var a=t[e];return r[n(a,e)]=a,r}),{})));var t,n}))},A=function(r){return function(e){var t=Object(n.createFactory)(e);return function(e){return t(o({},e,e[r]))}}},L=function(r,e,t){return function(a){var i=Object(n.createFactory)(a);return function(n){function a(){for(var r,e=arguments.length,a=new Array(e),o=0;o<e;o++)a[o]=arguments[o];return(r=n.call.apply(n,[this].concat(a))||this).state={stateValue:"function"==typeof t?t(r.props):t},r.updateStateValue=function(e,t){return r.setState((function(r){var t=r.stateValue;return{stateValue:"function"==typeof e?e(t):e}}),t)},r}return s(a,n),a.prototype.render=function(){var t;return i(o({},this.props,((t={})[r]=this.state.stateValue,t[e]=this.updateStateValue,t)))},a}(n.Component)}},T=function(r,e){return function(t){var a=Object(n.createFactory)(t);return function(t){function n(){for(var n,a=arguments.length,o=new Array(a),i=0;i<a;i++)o[i]=arguments[i];return(n=t.call.apply(t,[this].concat(o))||this).state="function"==typeof r?r(n.props):r,n.stateUpdaters=S(e,(function(r){return function(e){for(var t=arguments.length,a=new Array(t>1?t-1:0),o=1;o<t;o++)a[o-1]=arguments[o];e&&"function"==typeof e.persist&&e.persist(),n.setState((function(t,n){return r(t,n).apply(void 0,[e].concat(a))}))}})),n}return s(n,t),n.prototype.render=function(){return a(o({},this.props,this.state,this.stateUpdaters))},n}(n.Component)}},V=function(){},I=function(r,e,t,a){return function(i){var u=Object(n.createFactory)(i);return function(n){function i(){for(var r,e=arguments.length,a=new Array(e),o=0;o<e;o++)a[o]=arguments[o];return(r=n.call.apply(n,[this].concat(a))||this).state={stateValue:r.initializeStateValue()},r.dispatch=function(e,n){return void 0===n&&(n=V),r.setState((function(r){var n=r.stateValue;return{stateValue:t(n,e)}}),(function(){return n(r.state.stateValue)}))},r}s(i,n);var c=i.prototype;return c.initializeStateValue=function(){return void 0!==a?"function"==typeof a?a(this.props):a:t(void 0,{type:"@@recompose/INIT"})},c.render=function(){var t;return u(o({},this.props,((t={})[r]=this.state.stateValue,t[e]=this.dispatch,t)))},i}(n.Component)}},F=function(r){return r},M=function(r,e,t){return void 0===t&&(t=F),function(a){var o,i;return function(u){return r(u)?(o=o||Object(n.createFactory)(e(a)))(u):(i=i||Object(n.createFactory)(t(a)))(u)}}},U=function(r){return function(e){var t=Object(n.createFactory)(r);return function(r){return t(r)}}},G=function(r){function e(){return r.apply(this,arguments)||this}return s(e,r),e.prototype.render=function(){return null},e}(n.Component),B=function(r){return G},$=function(r){return function(e){var t=Object(n.createFactory)(e);return function(e){function n(){return e.apply(this,arguments)||this}s(n,e);var a=n.prototype;return a.shouldComponentUpdate=function(e){return r(this.props,e)},a.render=function(){return t(this.props)},n}(n.Component)}},K=function(r){return $((function(r,e){return!u()(r,e)}))(r)},W=function(r){return $((function(e,t){return!u()(P(t,r),P(e,r))}))},Y=function(r){var e=r.propTypes;var t=Object.keys(e||{});return W(t)(r)},X=function(r,e){return function(t){var a=Object(n.createFactory)(t),o=function(r){function t(){for(var t,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(t=r.call.apply(r,[this].concat(a))||this).getChildContext=function(){return e(t.props)},t}return s(t,r),t.prototype.render=function(){return a(this.props)},t}(n.Component);return o.childContextTypes=r,o}},J=function(r){return function(e){var t=Object(n.createFactory)(e),a=function(r,e){return t(o({},r,e))};return a.contextTypes=r,a}},H=function(r){return function(e){var t=Object(n.createFactory)(e);var a=function(r){function e(){return r.apply(this,arguments)||this}return s(e,r),e.prototype.render=function(){return t(o({},this.props,this.state))},e}(n.Component);return Object.keys(r).forEach((function(e){return a.prototype[e]=r[e]})),a}},z=function(r){return Boolean(r&&r.prototype&&"function"==typeof r.prototype.render)},Z=function(r){var e,t;return z(r)?r:(t=e=function(e){function t(){return e.apply(this,arguments)||this}return s(t,e),t.prototype.render=function(){return"string"==typeof r?a.a.createElement(r,this.props):r(this.props,this.context)},t}(n.Component),e.displayName=_(r),e.propTypes=r.propTypes,e.contextTypes=r.contextTypes,e.defaultProps=r.defaultProps,t)};function q(r){return r((function(r){return r.children(r)}))}var Q=function(r,e,t){return void 0===t&&(t="children"),function(n){var i=a.a.createFactory(n),u=a.a.createFactory(r);return function(r){var n;return u(((n={})[t]=function(){return i(o({},r,e.apply(void 0,arguments)))},n))}}},rr=function(r){return m("propTypes",r)},er=function(){for(var r=arguments.length,e=new Array(r),t=0;t<r;t++)e[t]=arguments[t];return e.reduce((function(r,e){return function(){return r(e.apply(void 0,arguments))}}),(function(r){return r}))},tr=function(r){var e=function(e){function t(){for(var r,t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];return(r=e.call.apply(e,[this].concat(n))||this).state={},r}return s(t,e),t.getDerivedStateFromProps=function(e){return r(e),null},t.prototype.render=function(){return null},t}(n.Component);return d(e),e},nr=function(r){var e=function(e){return Object(n.createElement)(e[r],x(e,[r]))};return e.displayName="componentFromProp("+r+")",e},ar=function(){for(var r=arguments.length,e=new Array(r),t=0;t<r;t++)e[t]=arguments[t];var a=e.map(n.createFactory),o=function(r){var e=r.children,t=p(r,["children"]);return a.reduceRight((function(r,e){return e(t,r)}),e)};return o},or=function(r,e){return function(t){var n=r(t);return y()(n,t,e),n}},ir={fromESObservable:null,toESObservable:null},ur=function(r){ir=r},sr={fromESObservable:function(r){return"function"==typeof ir.fromESObservable?ir.fromESObservable(r):r},toESObservable:function(r){return"function"==typeof ir.toESObservable?ir.toESObservable(r):r}},cr=function(r){return function(e){return function(t){function n(){for(var n,a,o=arguments.length,i=new Array(o),u=0;u<o;u++)i[u]=arguments[u];return(a=t.call.apply(t,[this].concat(i))||this).state={vdom:null},a.propsEmitter=Object(v.createChangeEmitter)(),a.props$=r.fromESObservable(((n={subscribe:function(r){return{unsubscribe:a.propsEmitter.listen((function(e){e?r.next(e):r.complete()}))}}})[b.a]=function(){return this},n)),a.vdom$=r.toESObservable(e(a.props$)),a}s(n,t);var a=n.prototype;return a.componentWillMount=function(){var r=this;this.subscription=this.vdom$.subscribe({next:function(e){r.setState({vdom:e})}}),this.propsEmitter.emit(this.props)},a.componentWillReceiveProps=function(r){this.propsEmitter.emit(r)},a.shouldComponentUpdate=function(r,e){return e.vdom!==this.state.vdom},a.componentWillUnmount=function(){this.propsEmitter.emit(),this.subscription.unsubscribe()},a.render=function(){return this.state.vdom},n}(n.Component)}},lr=function(r){return cr(sr)(r)},fr=function(r){return r},dr=function(r){var e=cr({fromESObservable:fr,toESObservable:fr});return function(t){return function(a){var o=Object(n.createFactory)(a),i=r.fromESObservable,u=r.toESObservable;return e((function(r){var e;return(e={subscribe:function(e){var n=u(t(i(r))).subscribe({next:function(r){return e.next(o(r))}});return{unsubscribe:function(){return n.unsubscribe()}}}})[b.a]=function(){return this},e}))}}},pr=function(r){return dr(sr)(r)},hr=function(r){return function(){var e,t=Object(v.createChangeEmitter)(),n=r.fromESObservable(((e={subscribe:function(r){return{unsubscribe:t.listen((function(e){return r.next(e)}))}}})[b.a]=function(){return this},e));return{handler:t.emit,stream:n}}},yr=hr(sr)},function(r,e,t){"use strict";var n={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o=Object.defineProperty,i=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,s=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,l=c&&c(Object);r.exports=function r(e,t,f){if("string"!=typeof t){if(l){var d=c(t);d&&d!==l&&r(e,d,f)}var p=i(t);u&&(p=p.concat(u(t)));for(var h=0;h<p.length;++h){var y=p[h];if(!(n[y]||a[y]||f&&f[y])){var v=s(t,y);try{o(e,y,v)}catch(r){}}}return e}return e}},function(r,e,t){"use strict";function n(r){var e,t=r.Symbol;return"function"==typeof t?t.observable?e=t.observable:(e=t("observable"),t.observable=e):e="@@observable",e}t.d(e,"a",(function(){return n}))},function(r,e,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(r,e,t,n){void 0===n&&(n=t),Object.defineProperty(r,n,{enumerable:!0,get:function(){return e[t]}})}:function(r,e,t,n){void 0===n&&(n=t),r[n]=e[t]}),a=this&&this.__setModuleDefault||(Object.create?function(r,e){Object.defineProperty(r,"default",{enumerable:!0,value:e})}:function(r,e){r.default=e}),o=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var e={};if(null!=r)for(var t in r)Object.hasOwnProperty.call(r,t)&&n(e,r,t);return a(e,r),e};Object.defineProperty(e,"__esModule",{value:!0}),e.CoreUtils=o(t(3)),e.Sections=o(t(39)),e.DataParser=o(t(72)),e.DataLinkParser=o(t(73)),e.builtInComputations=o(t(18))},function(r,e,t){"use strict";var n=this&&this.__read||function(r,e){var t="function"==typeof Symbol&&r[Symbol.iterator];if(!t)return r;var n,a,o=t.call(r),i=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(r){a={error:r}}finally{try{n&&!n.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spread||function(){for(var r=[],e=0;e<arguments.length;e++)r=r.concat(n(arguments[e]));return r};Function.prototype.isGenerator||(Function.prototype.isGenerator=function(){return"GeneratorFunction"===this.constructor.name}),Function.prototype.isAsyncGenerator=function(){return"AsyncGeneratorFunction"===this.constructor.name},Function.prototype.isAsync||(Function.prototype.isAsync=function(){return"AsyncFunction"===this.constructor.name}),Array.prototype.flat||(Array.prototype.flat=function(r){return void 0===r&&(r=1),(r=isNaN(r)?0:Math.floor(r))<1?this.slice():[].concat.apply([],a(r<2?this:this.map((function(e){return Array.isArray(e)?e.flat(r-1):e}))))})},function(r,e,t){"use strict";var n=this&&this.__read||function(r,e){var t="function"==typeof Symbol&&r[Symbol.iterator];if(!t)return r;var n,a,o=t.call(r),i=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(r){a={error:r}}finally{try{n&&!n.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(e,"__esModule",{value:!0}),e.isIframe=e.doNothing=e.debounce=e.buildClassNames=e.isEmpty=e.isReactElement=e.isFunction=e.isDate=e.isArray=e.isError=e.strictlyIsObject=e.isObject=e.isNumber=e.isString=e.isBoolean=void 0,e.isBoolean=function(r){return"boolean"==typeof r},e.isString=function(r){return"string"==typeof r},e.isNumber=function(r){return"number"==typeof r},e.isObject=function(r){return"object"==typeof r},e.strictlyIsObject=function(r){return"[object Object]"===Object.prototype.toString.call(r)},e.isError=function(r){return"[object Error]"===Object.prototype.toString.call(r)},e.isArray=function(r){return Array.isArray(r)},e.isDate=function(r){return r instanceof Date},e.isFunction=function(r){return"function"==typeof r},e.isReactElement=function(r){return e.isObject(r)&&r.$$typeof===Symbol.for("react.element")},e.isEmpty=function(r){return!e.isBoolean(r)&&(e.isString(r)?""===r:e.isNumber(r)?isNaN(r):!e.isDate(r)&&(e.isObject(r)?null===r||(e.isArray(r)?0===r.length:0===Object.keys(r).length):!r))},e.buildClassNames=function(r,t,a){if(void 0===r&&(r={}),void 0===a&&(a=""),e.isObject(t)){if(e.isArray(t))return t.map((function(e){return r[""+a+e]}));Object.entries(t).reduce((function(e,t){var o=n(t,2),i=o[0],u=o[1];return e[r[""+a+i]]=u,e}),{})}return e.isString(t)?r[""+a+t]||t:""};var a={};e.debounce=function(r,e,t){if(void 0===e&&(e=0),void 0===t&&(t=Symbol("debounced")),"function"!=typeof r)throw new Error("debounce: no callback!");if(e=+e,isNaN(e))throw new Error("debounce: delay should be number!");return"symbol"!=typeof t&&(t=Symbol(t)),a[t.toString()]&&clearTimeout(a[t.toString()]),a[t.toString()]=window.setTimeout((function(){r(),delete a[t.toString()]}),e),t},e.doNothing=function(){},e.isIframe=function(r){try{return Boolean(r.location!==r.parent.location||r.self!==r.top||r.self.frameElement&&(r.self.frameElement+"").indexOf("HTMLIFrameElement")>-1)}catch(r){console.error("[error] isIframe:",r.message,r.stack)}return!1}},function(r,e,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(r,e,t,n){void 0===n&&(n=t),Object.defineProperty(r,n,{enumerable:!0,get:function(){return e[t]}})}:function(r,e,t,n){void 0===n&&(n=t),r[n]=e[t]}),a=this&&this.__setModuleDefault||(Object.create?function(r,e){Object.defineProperty(r,"default",{enumerable:!0,value:e})}:function(r,e){r.default=e}),o=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var e={};if(null!=r)for(var t in r)Object.hasOwnProperty.call(r,t)&&n(e,r,t);return a(e,r),e};Object.defineProperty(e,"__esModule",{value:!0}),e.v4=o(t(14))},function(r,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isFunctionCall=e.isFunctionRef=e.isFunction=e.isRootLink=e.isLink=e.isDataLink=void 0,e.isDataLink=function(r){return/(?<!\\)[@$`([{]/.test(r)},e.isLink=function(r){return/^@[a-zA-Z0-9\\<>:_/-]+/.test(r)},e.isRootLink=function(r){return/^@\/[a-zA-Z0-9\\<>:_/-]+/.test(r)},e.isFunction=function(r){return/^\$[a-zA-Z0-9_-]+/.test(r)},e.isFunctionRef=function(r){return/^\$[a-zA-Z0-9_-]+\b$/.test(r)},e.isFunctionCall=function(r){return/^\$[a-zA-Z0-9_-]+\(.*?\)$/.test(r)}},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var o=a(t(6)),i=t(1),u=t(7),s=function(r,e){return e?""+e+r:r};e.default=function(r){var e,t,a,c,l=r.dataLink;if(!(l instanceof u.DataLink))throw new i.DataParserError(i.DataParserError.ERRORS.DATA_LINK_TYPE);a=null;try{try{for(var f=n(l),d=f.next();!d.done;d=f.next()){var p=d.value;switch(p[1]){case"@":case"$":case"{":case"[":case"`":case"(":c=o.default(r),a=s(c,a);break;case"\\":a=s(p[2],a),l.getNextValue();break;case"}":case"]":case")":throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);default:a=s(p[1],a)}if(l.isEnd())break}}catch(r){e={error:r}}finally{try{d&&!d.done&&(t=f.return)&&t.call(f)}finally{if(e)throw e.error}}}catch(e){if(e instanceof i.DataParserError){var h=l.getCursorPositionInfo();e.fullMessage=e.message+', dataLink: "'+h+'" at position '+l.getCurrentIndex(),l.isEnd()&&(e.fullMessage+=" (out of the string)"),e.data=r.data}throw console.error(e),e}return a}},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var o=t(1),i=t(16),u=a(t(17));e.default=function(r){var e,t,a=r.dataLink,s=a.getCurrentValue(),c=[];if("["!==s[1])throw new o.DataParserError(o.DataParserError.ERRORS.ITERATOR_ERROR);if("]"===s[2])return a.getNextValue(),[];try{for(var l=n(a),f=l.next();!f.done;f=l.next()){switch((s=f.value)[1]){case"[":if(" "===s[2]&&(u.default(r),s=a.getCurrentValue()),"]"===s[2])return[];case",":if(" "===s[2]&&(u.default(r),s=a.getCurrentValue()),a.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);if(","===s[2])throw new o.DataParserError(o.DataParserError.ERRORS.ARRAY_VALUE);if(s=a.getNextValue(),c.push(i.valueParser(r,!0))," "===(s=a.getCurrentValue())[2]&&(u.default(r),s=a.getCurrentValue()),a.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);if(","===s[2]||"]"===s[2])break;throw new o.DataParserError(o.DataParserError.ERRORS.ARRAY_VALUE)}if("]"===s[2]){a.getNextValue();break}}}catch(r){e={error:r}}finally{try{f&&!f.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}return c}},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var o=t(1),i=a(t(6)),u=a(t(4)),s=a(t(26)),c=function(r,e){return void 0===e?e=r:e+=""+r,e};e.default=function(r,e){var t,a,l,f=r.dataLink,d=f.getCurrentValue();if(!0===e&&"["!==d[0]&&","!==d[0]&&" "!==d[0]||!1===e&&":"!==d[0]&&" "!==d[0]||void 0===e&&"("!==d[0]&&" "!==d[0])throw new o.DataParserError(o.DataParserError.ERRORS.ITERATOR_ERROR);try{for(var p=n(f),h=p.next();!h.done;h=p.next()){switch((d=h.value)[1]){case" ":throw new o.DataParserError(o.DataParserError.ERRORS.DEFAULT);case"\\":l=c(f.getNextValue());break;case"@":case"$":case"{":case"[":case"`":case"(":if(l=c(i.default(r)),f.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);d=f.getCurrentValue();break;default:if(f.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);if(!u.default(d[1]))throw e?new o.DataParserError(o.DataParserError.ERRORS.ARRAY_VALUE):new o.DataParserError(o.DataParserError.ERRORS.OBJECT_VALUE);l=(l||"")+c(d[1])}switch(d[2]){case",":case"]":case" ":case"}":case")":return s.default(l)}}}catch(r){t={error:r}}finally{try{h&&!h.done&&(a=p.return)&&a.call(p)}finally{if(t)throw t.error}}throw new o.DataParserError(o.DataParserError.ERRORS.DEFAULT)}},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var o=t(1),i=a(t(6)),u=a(t(17)),s=t(16),c=function(r){var e,t,a=r.dataLink,i=[],c=a.getCurrentValue();if("("!==c[1])throw new o.DataParserError(o.DataParserError.ERRORS.ITERATOR_ERROR);try{for(var l=n(a),f=l.next();!f.done;f=l.next()){switch((c=f.value)[1]){case"(":if(" "===c[2]&&(u.default(r),c=a.getCurrentValue()),")"===c[2])break;case",":if(" "===c[2]&&(u.default(r),c=a.getCurrentValue()),a.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);if(","===c[2])throw new o.DataParserError(o.DataParserError.ERRORS.FUNCTION_ARGUMENTS);if(c=a.getNextValue(),i.push(s.valueParser(r))," "===(c=a.getCurrentValue())[2]&&(u.default(r),c=a.getCurrentValue()),a.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);if(","===c[2]||")"===c[2])break;throw new o.DataParserError(o.DataParserError.ERRORS.FUNCTION_ARGUMENTS)}if(")"===c[2]){a.getNextValue();break}}}catch(r){e={error:r}}finally{try{f&&!f.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}return i},l=function(r){var e,t,a=r.dataLink,s="",c=a.getCurrentValue();if("("!==c[1])throw new o.DataParserError(o.DataParserError.ERRORS.ITERATOR_ERROR);if(" "===c[2]&&(u.default(r),c=a.getCurrentValue()),")"===c[2])return a.getNextValue(),"";a.getNextValue();try{for(var l=n(a),f=l.next();!f.done;f=l.next()){if(c=f.value,a.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);switch(c[1]){case"@":case"$":case"{":case"[":case"`":case"(":if(s+=i.default(r),a.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);c=a.getCurrentValue();break;case"\\":s+=c[2],c=a.getNextValue();break;case" ":var d=" ";if(" "===c[2]&&(d+=u.default(r),c=a.getCurrentValue(),a.isEnd()))throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);if(")"===(c=a.getCurrentValue())[2])break;s+=d;break;default:s+=c[1]}if(")"===c[2]){a.getNextValue();break}}}catch(r){e={error:r}}finally{try{f&&!f.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}return s};e.default=function(r,e){return e?c(r):l(r)}},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var o=t(1),i=a(t(4)),u=t(6),s=t(46);e.default=function(r){var e,t,a=r.dataLink,c=r.renderFunctions,l=r.data,f=a.getCurrentValue();if("$"!==f[1])throw new o.DataParserError(o.DataParserError.ERRORS.ITERATOR_ERROR);if(!i.default(f[2]))throw new o.DataParserError(o.DataParserError.ERRORS.FUNCTION_NAMING);f=a.getNextValue();var d="";try{for(var p=n(a),h=p.next();!h.done&&(d+=(f=h.value)[1],i.default(f[2]));h=p.next());}catch(r){e={error:r}}finally{try{h&&!h.done&&(t=p.return)&&t.call(p)}finally{if(e)throw e.error}}var y=c[d];if("function"!=typeof y){if("("!==f[2]&&!a.isEnd()&&!i.default(f[2]))throw new o.DataParserError(o.DataParserError.ERRORS.FUNCTION_NAMING);throw new o.DataParserError(o.DataParserError.ERRORS.FUNCTION_UNKNOWN)}var v=s.isContextualRenderFunctions(c)?c:l;return"("===f[2]?(a.getNextValue(),y.apply(v,u.expressionParser(r,!0))):y.bind(v)}},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.isContextualRenderFunctions=e.composeContextualRenderFunctions=void 0;var o=a(t(15));function i(){return function r(e,t,n){if(!(this&&this instanceof r?this.constructor:void 0))throw new Error("ContextualRenderFunctions: Must be invoked as a constructor!");this.values=e,this.props=t,this.setValues=n}}e.composeContextualRenderFunctions=function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];if(!r.length)throw new Error("composeContextualRenderFunctions: at least one object with functions must be passed!");var t=r.reduce((function(r,e){return n(n({},r),e)}),{}),a=i();return a.prototype=n(n({},t),{constructor:a.prototype.constructor}),a},e.isContextualRenderFunctions=function(r){return!!o.default(r)&&"ContextualRenderFunctions"===Object.getPrototypeOf(r).constructor.name}},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var i=o(t(4)),u=o(t(15)),s=t(1),c=o(t(6)),l=function(r,e){var t,o,l=r.dataLink,p=r.defaultValue,h="",y=!1,v=l.getCurrentValue();if("/"!==v[1]&&"@"!==v[1])throw new s.DataParserError(s.DataParserError.ERRORS.ITERATOR_ERROR);if(l.isEnd())return e;l.getNextValue();try{for(var b=a(l),m=b.next();!m.done;m=b.next()){switch((v=m.value)[1]){case"<":if("/"!==v[0])throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_PART);return d(r,e);case":":h=f(r,e);break;case"$":case"{":case"[":case"(":if("/"!==v[0]&&"@"!==v[0])throw new s.DataParserError(s.DataParserError.ERRORS.LINK);h=c.default(n(n({},r),{data:e})),y=!0;break;case"\\":if("string"!=typeof h)throw new s.DataParserError(s.DataParserError.ERRORS.LINK);if(" "===v[2])throw new s.DataParserError(s.DataParserError.ERRORS.LINK);h+=v[2],l.getNextValue();break;default:if(!i.default(v[1]))throw new s.DataParserError(s.DataParserError.ERRORS.LINK);if("string"!=typeof h)throw new s.DataParserError(s.DataParserError.ERRORS.LINK);h+=v[1]}if(v=l.getCurrentValue(),l.isEnd()||"/"===v[2]||"\\"!==v[2]&&!i.default(v[2]))break;y=!1}}catch(r){t={error:r}}finally{try{m&&!m.done&&(o=b.return)&&o.call(b)}finally{if(t)throw t.error}}return"string"==typeof h?y&&"/"!==v[2]?h:u.default(e)||Array.isArray(e)?h&&/^\d+$/.test(h)&&Array.isArray(e)?e[Number(h)]||p:h&&u.default(e)?void 0===e[h]?p:e[h]:p:p:h},f=function(r,e){var t,n,o=r.dataLink,c=r.defaultValue,l=r.tokens,f=void 0===l?{}:l,d="",p=o.getCurrentValue();if(":"!==p[1])throw new s.DataParserError(s.DataParserError.ERRORS.ITERATOR_ERROR);if("/"!==p[0]&&"@"!==p[0]||o.isEnd()||"\\"!==p[2]&&!i.default(p[2]))throw new s.DataParserError(s.DataParserError.ERRORS.LINK);o.getNextValue();try{for(var h=a(o),y=h.next();!y.done&&(d+=(p=y.value)[1],!o.isEnd()&&("\\"===p[2]||"/"!==p[2]&&i.default(p[2])));y=h.next());}catch(r){t={error:r}}finally{try{y&&!y.done&&(n=h.return)&&n.call(h)}finally{if(t)throw t.error}}var v=d&&Object.prototype.hasOwnProperty.call(f,d)?f[d]:0;if(!u.default(e)&&!Array.isArray(e))return console.warn("Error: The data should be an object or an array!"),c;var b=e[v];return void 0===b?c:b},d=function(r,e){var t,n,o=r.dataLink,u="",c=o.getCurrentValue();if(!Array.isArray(e))throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_NOT_ARRAY_DATA);if("<"!==c[1])throw new s.DataParserError(s.DataParserError.ERRORS.ITERATOR_ERROR);if(">"===c[2]||"/"!==c[0])throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_EMPTY);o.getNextValue();try{for(var l=a(o),f=l.next();!f.done;f=l.next()){if(c=f.value,!i.default(c[1]))throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_NAME);if(u+=c[1],">"===c[2])break}}catch(r){t={error:r}}finally{try{f&&!f.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}if("/"===(c=o.getNextValue())[2])throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_LAST);if(i.default(c[2]))throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_PART);for(var d in e)e[d][u]=d;return e};e.default=function(r){var e,t,n=r.dataLink,o=r.data,u=r.rootData,c=n.getCurrentValue();if("@"!==c[1])throw new s.DataParserError(s.DataParserError.ERRORS.ITERATOR_ERROR);var f=o;"/"===c[2]&&(f=u,n.getNextValue());try{for(var d=a(n),p=d.next();!p.done;p=d.next()){if("/"!==(c=p.value)[1]&&"@"!==c[1])throw new s.DataParserError(s.DataParserError.ERRORS.LINK);if(f=l(r,f),c=n.getCurrentValue(),n.isEnd()||"/"!==c[2]&&!i.default(c[2]))break}}catch(r){e={error:r}}finally{try{p&&!p.done&&(t=d.return)&&t.call(d)}finally{if(e)throw e.error}}return f}},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var o=t(1),i=t(16),u=a(t(4)),s=a(t(6)),c=Symbol("NotDefined"),l=function(r){var e,t,a=r.dataLink,i="";try{for(var c=n(a),l=c.next();!l.done;l=c.next()){var f=l.value;if("{"===f[1]||"}"===f[1])throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);switch(f[1]){case"(":case"@":case"$":var d=s.default(r);if("string"!=typeof d)throw new o.DataParserError(o.DataParserError.ERRORS.OBJECT_KEY_STRING);i+=d,f=a.getCurrentValue();break;case"\\":i+=(f=a.getNextValue())[1];break;default:if("/"!==f[1]&&!u.default(f[1]))throw new o.DataParserError(o.DataParserError.ERRORS.OBJECT_KEY);i+=f[1]}if(a.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);if(":"===f[2]||" "===f[2])break}}catch(r){e={error:r}}finally{try{l&&!l.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}return i};e.default=function(r){var e,t,a=r.dataLink,u=a.getCurrentValue(),s={},f=c,d=c;if("{"!==u[1])throw new o.DataParserError(o.DataParserError.ERRORS.ITERATOR_ERROR);try{for(var p=n(a),h=p.next();!h.done;h=p.next()){switch((u=h.value)[1]){case",":case"{":if(" "===u[2]&&(i.spaceSkipping(r),u=a.getCurrentValue()),a.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);if(a.getNextValue(),f=l(r)," "===(u=a.getCurrentValue())[2]&&(i.spaceSkipping(r),u=a.getCurrentValue()),a.isEnd()||":"!==u[2])throw new o.DataParserError(o.DataParserError.ERRORS.OBJECT_KEY);break;case":":if(" "===u[2]&&(i.spaceSkipping(r),u=a.getCurrentValue()),a.isEnd()||","===u[2]||"}"===u[2])throw new o.DataParserError(o.DataParserError.ERRORS.OBJECT_VALUE);if(a.getNextValue(),d=i.valueParser(r,!1),!f||"string"!=typeof f)throw new o.DataParserError(o.DataParserError.ERRORS.OBJECT_KEY);if(s[f]=d," "===(u=a.getCurrentValue())[2]&&(i.spaceSkipping(r),u=a.getCurrentValue()),","===u[2]||"}"===u[2])break;throw new o.DataParserError(o.DataParserError.ERRORS.OBJECT_VALUE);default:throw new o.DataParserError(o.DataParserError.ERRORS.DEFAULT)}if(a.isEnd())throw new o.DataParserError(o.DataParserError.ERRORS.NESTING);if("}"===u[2]){a.getNextValue();break}}}catch(r){e={error:r}}finally{try{h&&!h.done&&(t=p.return)&&t.call(p)}finally{if(e)throw e.error}}return s}},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var a=t(1);e.default=function(r){var e,t,o=r.dataLink,i="",u=o.getCurrentValue();if("`"!==u[1])throw new a.DataParserError(a.DataParserError.ERRORS.ITERATOR_ERROR);o.getNextValue();try{for(var s=n(o),c=s.next();!c.done&&"`"!==(u=c.value)[1];c=s.next()){if("\\"===u[1]&&(u=o.getNextValue()),o.isEnd())throw new a.DataParserError(a.DataParserError.ERRORS.DEFAULT);i+=u[1]}}catch(r){e={error:r}}finally{try{c&&!c.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}return i}},function(r,e,t){"use strict";var n=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var a=function(){var r=function(){var r;return n(this,(function(e){switch(e.label){case 0:r=1,e.label=1;case 1:return r<Number.MAX_SAFE_INTEGER?[4,r]:[3,4];case 2:e.sent(),e.label=3;case 3:return r++,[3,1];case 4:throw new Error("The safe number range is over!")}}))}();this.gen=r};a.prototype.get=function(){return this.gen.next().value},e.default=a},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},o=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(r,e){var t="function"==typeof Symbol&&r[Symbol.iterator];if(!t)return r;var n,a,o=t.call(r),i=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(r){a={error:r}}finally{try{n&&!n.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},u=this&&this.__spread||function(){for(var r=[],e=0;e<arguments.length;e++)r=r.concat(i(arguments[e]));return r},s=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.getHandler=void 0;var c=s(t(30)),l=t(3),f=s(t(19)),d=t(13),p=t(5),h=t(31),y=t(2),v=t(62),b={};function m(r,e,t,n,a,o){for(var i=[],s=6;s<arguments.length;s++)i[s-6]=arguments[s];return new Promise((function(s,c){var l=o._formId_,f=n._objectId_,d=(b[l]||{}).breakControls,p=void 0===d?null:d;if(r&&!p)throw new Error("[error] breakControls is not defined.");var h=E.apply(void 0,u([e,t,n,a,o],i)),y=!1;r&&(p[f]=function(e){try{h.throw(e).done||(c(e),y=!0),r&&delete p[f]}catch(r){c(r)}});var v=function(r){try{if(y)return;var e=h.next(r),t=e.value;e.done?s(t):t.then(v,c)}catch(r){c(r)}};v()}))}function E(r,e){var t,n,i,s,c,l,d,p,h=[];for(t=2;t<arguments.length;t++)h[t-2]=arguments[t];return a(this,(function(t){switch(t.label){case 0:t.trys.push([0,9,,10]),t.label=1;case 1:t.trys.push([1,6,7,8]),n=o(r),i=n.next(),t.label=2;case 2:return i.done?[3,5]:(s=i.value,[4,_.apply(void 0,u([s,e],h))]);case 3:e=t.sent(),t.label=4;case 4:return i=n.next(),[3,2];case 5:return[3,8];case 6:return c=t.sent(),d={error:c},[3,8];case 7:try{i&&!i.done&&(p=n.return)&&p.call(n)}finally{if(d)throw d.error}return[7];case 8:return[2,e];case 9:if(!((l=t.sent())instanceof f.default))throw l;return console.warn("[debug] actionsIterator has been stopped."),[3,10];case 10:return[2]}}))}e.getHandler=function(r){var e=r.schema,t=r.computations,n=r.updateState,a=e._formId_;if("function"!=typeof n)throw new Error("SectionsComputations: update state callback must be a function.");return function(r){var i=r.value,u=r.actions,s=r.after,p=r.context,h=r.currentSchemaObject,y=r.match,E=r.location,_=h._objectId_;if(_=Number(_),Number.isNaN(_))throw new Error("SectionsComputation: _objectId_ must be a number.");if(void 0===a||!a)throw new Error("SectionsComputations: formId must be defined.");b.hasOwnProperty(a)||(b[a]={mainReject:null,newContext:d.deepCopy(p),computeChains:{},afterActions:{},breakControls:{}});var O=b[a],P=O.mainReject,R=O.newContext,S=O.breakControls,D=O.computeChains,j=O.afterActions;if("function"==typeof P&&P(new f.default),"function"==typeof S[_]&&(S[_](new f.default),delete D[_]),!Array.isArray(u))throw new Error("SectionsComputation: Actions should be an Array.");if(!u.length)throw new Error("SectionsComputation: Actions can not be empty.");var x=m(!0,u,i,h,R,e,t,y,E,n);x.then((function(){return g(h,R)})).catch((function(r){if(!(r instanceof c.default))throw r;w(r,h,R),console.error("There are errors in the form!")})).then((function(){return g(e,R)})).catch((function(r){r instanceof Error&&!(r instanceof f.default)&&(w(r,e,R),console.error(r))})),D[_]=x;var k=Object.values(D),N=v.awaitAll(k),C=N.rejectCallback,A=N.promise;b[a].mainReject=C,Array.isArray(s)&&s.length&&(j[_]={actions:s,value:i,currentSchemaObject:h}),A.then((function(r){r.reduce((function(r,e){var t=e.status;return r||"success"===t}),!1)&&n(R),delete b[a]}),(function(r){if(r instanceof f.default)throw r;console.error("[error] computations: ",r)})).then((function(){var r,n,a={};if(!l.isEmpty(j)){var i=Object.getOwnPropertyNames(j);try{for(var u=o(i),s=u.next();!s.done;s=u.next()){var c=s.value,f=j[c],d=f.actions,p=f.value,h=f.currentSchemaObject;a[c]=m(!1,d,p,h,R,e,t)}}catch(e){r={error:e}}finally{try{s&&!s.done&&(n=u.return)&&n.call(u)}finally{if(r)throw r.error}}return v.awaitAll(a).promise}}),(function(r){if(r instanceof f.default)return null})).catch((function(r){console.error("[error] afterComputations: ",r)}))}};var _=function(r,e,t,a,o,i,u,s,c){return new Promise((function(l,f){var d=function(r){p.isObject(r)?(r=n(n({},e),r)).hasOwnProperty("value")&&r.hasOwnProperty("dataLink")?l(r):f(new Error('Returned object must contain "value" and "dataLink" properties.')):f(new Error("Computation must return an object."))};h.asyncDataParser({schema:r,functions:i,data:a,rootData:a,mode:h.MODE.USER_DEEP}).then((function(r){if("function"==typeof r){var n=r(e,{context:a,schema:o,currentSchemaObject:t,match:u,location:s,computations:i,updateState:c});r.isGenerator()?y.runAsyncGenerator(n,d,f):n instanceof Promise?n.then(d,f):d(n)}else r instanceof Promise?r.then(d,f):d(r)})).catch(f)}))},w=function(r,e,t){var a=e._objectId_,o=Symbol.for(a),i=t[o]||{};l.isError(r)?t[o]=n(n({},i),{errors:[r.message]}):(console.warn("[debug] error",Object.prototype.toString.call(r)),console.error("Unhandled error! Error object must be instance of the Error."),console.error(r))},g=function(r,e){var t=r._objectId_,a=Symbol.for(t),o=e[a]||{};"errors"in o&&delete o.errors,e[a]=n({},o)}},function(r,e,t){"use strict";var n=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var i=o(t(8)),u=t(2),s=t(10),c=function(r,e){return e?""+e+r:r};e.default=function(r){var e,t,o,l,f,d,p,h,y,v,b;return n(this,(function(n){switch(n.label){case 0:if(!((e=r.dataLink)instanceof s.DataLink))throw new u.DataParserError(u.DataParserError.ERRORS.DATA_LINK_TYPE);t=void 0,n.label=1;case 1:n.trys.push([1,15,,16]),n.label=2;case 2:n.trys.push([2,12,13,14]),o=a(e),l=o.next(),n.label=3;case 3:if(l.done)return[3,11];switch(f=l.value,f[1]){case"@":case"$":case"{":case"[":case"`":case"(":return[3,4];case"\\":return[3,6];case"}":case"]":case")":return[3,7]}return[3,8];case 4:return d=c,[5,a(i.default(r))];case 5:return t=d.apply(void 0,[n.sent(),t]),[3,9];case 6:return t=c(f[2],t),e.getNextValue(),[3,9];case 7:throw new u.DataParserError(u.DataParserError.ERRORS.NESTING);case 8:return t=c(f[1],t),[3,9];case 9:if(e.isEnd())return[3,11];n.label=10;case 10:return l=o.next(),[3,3];case 11:return[3,14];case 12:return p=n.sent(),v={error:p},[3,14];case 13:try{l&&!l.done&&(b=o.return)&&b.call(o)}finally{if(v)throw v.error}return[7];case 14:return[3,16];case 15:throw(h=n.sent())instanceof u.DataParserError&&(y=e.getCursorPositionInfo(),h.fullMessage=h.message+', dataLink: "'+y+'" at position '+e.getCurrentIndex(),e.isEnd()&&(h.fullMessage+=" (out of the string)"),h.data=r.data),console.error(h),h;case 16:return[2,t]}}))}},function(r,e,t){"use strict";var n=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var i=t(2),u=t(20),s=o(t(21));e.default=function(r){var e,t,o,c,l,f,d,p,h;return n(this,(function(n){switch(n.label){case 0:if(e=r.dataLink,t=e.getCurrentValue(),o=[],"["!==t[1])throw new i.DataParserError(i.DataParserError.ERRORS.ITERATOR_ERROR);if("]"===t[2])return e.getNextValue(),[2,[]];n.label=1;case 1:n.trys.push([1,9,10,11]),c=a(e),l=c.next(),n.label=2;case 2:if(l.done)return[3,8];switch(t=l.value,t[1]){case"[":return[3,3];case",":return[3,4]}return[3,6];case 3:if(" "===t[2]&&(s.default(r),t=e.getCurrentValue()),"]"===t[2])return[2,[]];n.label=4;case 4:if(" "===t[2]&&(s.default(r),t=e.getCurrentValue()),e.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);if(","===t[2])throw new i.DataParserError(i.DataParserError.ERRORS.ARRAY_VALUE);return t=e.getNextValue(),[5,a(u.valueParser(r,!0))];case 5:if(f=n.sent(),o.push(f)," "===(t=e.getCurrentValue())[2]&&(s.default(r),t=e.getCurrentValue()),e.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);if(","===t[2]||"]"===t[2])return[3,6];throw new i.DataParserError(i.DataParserError.ERRORS.ARRAY_VALUE);case 6:if("]"===t[2])return e.getNextValue(),[3,8];n.label=7;case 7:return l=c.next(),[3,2];case 8:return[3,11];case 9:return d=n.sent(),p={error:d},[3,11];case 10:try{l&&!l.done&&(h=c.return)&&h.call(c)}finally{if(p)throw p.error}return[7];case 11:return[2,o]}}))}},function(r,e,t){"use strict";var n=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var i=t(2),u=o(t(8)),s=o(t(4)),c=o(t(26)),l=function(r,e){return void 0===e?e=r:e+=""+r,e};e.default=function(r,e){var t,o,f,d,p,h,y,v,b;return n(this,(function(n){switch(n.label){case 0:if(t=r.dataLink,o=t.getCurrentValue(),!0===e&&"["!==o[0]&&","!==o[0]&&" "!==o[0]||!1===e&&":"!==o[0]&&" "!==o[0]||void 0===e&&"("!==o[0]&&" "!==o[0])throw new i.DataParserError(i.DataParserError.ERRORS.ITERATOR_ERROR);n.label=1;case 1:n.trys.push([1,11,12,13]),d=a(t),p=d.next(),n.label=2;case 2:if(p.done)return[3,10];switch(o=p.value,o[1]){case" ":return[3,3];case"\\":return[3,4];case"@":case"$":case"{":case"[":case"`":case"(":return[3,5]}return[3,7];case 3:throw new i.DataParserError(i.DataParserError.ERRORS.DEFAULT);case 4:return f=l(t.getNextValue()),[3,8];case 5:return h=l,[5,a(u.default(r))];case 6:if(f=h.apply(void 0,[n.sent()]),t.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);return o=t.getCurrentValue(),[3,8];case 7:if(t.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);if(!s.default(o[1]))throw e?new i.DataParserError(i.DataParserError.ERRORS.ARRAY_VALUE):new i.DataParserError(i.DataParserError.ERRORS.OBJECT_VALUE);return f=(f||"")+l(o[1]),[3,8];case 8:switch(o[2]){case",":case"]":case" ":case"}":case")":return[2,c.default(f)]}n.label=9;case 9:return p=d.next(),[3,2];case 10:return[3,13];case 11:return y=n.sent(),v={error:y},[3,13];case 12:try{p&&!p.done&&(b=d.return)&&b.call(d)}finally{if(v)throw v.error}return[7];case 13:throw new i.DataParserError(i.DataParserError.ERRORS.DEFAULT)}}))}},function(r,e,t){"use strict";var n=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var i=t(2),u=o(t(8)),s=o(t(21)),c=t(20),l=function(r){var e,t,o,u,l,f,d,p,h,y;return n(this,(function(n){switch(n.label){case 0:if(e=r.dataLink,t=[],"("!==(o=e.getCurrentValue())[1])throw new i.DataParserError(i.DataParserError.ERRORS.ITERATOR_ERROR);n.label=1;case 1:n.trys.push([1,9,10,11]),u=a(e),l=u.next(),n.label=2;case 2:if(l.done)return[3,8];switch(o=l.value,o[1]){case"(":return[3,3];case",":return[3,4]}return[3,6];case 3:if(" "===o[2]&&(s.default(r),o=e.getCurrentValue()),")"===o[2])return[3,6];n.label=4;case 4:if(" "===o[2]&&(s.default(r),o=e.getCurrentValue()),e.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);if(","===o[2])throw new i.DataParserError(i.DataParserError.ERRORS.FUNCTION_ARGUMENTS);return o=e.getNextValue(),d=(f=t).push,[5,a(c.valueParser(r))];case 5:if(d.apply(f,[n.sent()])," "===(o=e.getCurrentValue())[2]&&(s.default(r),o=e.getCurrentValue()),e.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);if(","===o[2]||")"===o[2])return[3,6];throw new i.DataParserError(i.DataParserError.ERRORS.FUNCTION_ARGUMENTS);case 6:if(")"===o[2])return e.getNextValue(),[3,8];n.label=7;case 7:return l=u.next(),[3,2];case 8:return[3,11];case 9:return p=n.sent(),h={error:p},[3,11];case 10:try{l&&!l.done&&(y=u.return)&&y.call(u)}finally{if(h)throw h.error}return[7];case 11:return[2,t]}}))},f=function(r){var e,t,o,c,l,f,d,p,h,y;return n(this,(function(n){switch(n.label){case 0:if(e=r.dataLink,t="","("!==(o=e.getCurrentValue())[1])throw new i.DataParserError(i.DataParserError.ERRORS.ITERATOR_ERROR);if(" "===o[2]&&(s.default(r),o=e.getCurrentValue()),")"===o[2])return e.getNextValue(),[2,""];e.getNextValue(),n.label=1;case 1:n.trys.push([1,11,12,13]),c=a(e),l=c.next(),n.label=2;case 2:if(l.done)return[3,10];if(o=l.value,e.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);switch(o[1]){case"@":case"$":case"{":case"[":case"`":case"(":return[3,3];case"\\":return[3,5];case" ":return[3,6]}return[3,7];case 3:return f=t,[5,a(u.default(r))];case 4:if(t=f+n.sent(),e.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);return o=e.getCurrentValue(),[3,8];case 5:return t+=o[2],o=e.getNextValue(),[3,8];case 6:if(d=" "," "===o[2]&&(d+=s.default(r),o=e.getCurrentValue(),e.isEnd()))throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);return")"===(o=e.getCurrentValue())[2]||(t+=d),[3,8];case 7:return t+=o[1],[3,8];case 8:if(")"===o[2])return e.getNextValue(),[3,10];n.label=9;case 9:return l=c.next(),[3,2];case 10:return[3,13];case 11:return p=n.sent(),h={error:p},[3,13];case 12:try{l&&!l.done&&(y=c.return)&&y.call(c)}finally{if(h)throw h.error}return[7];case 13:return[2,t]}}))};e.default=function(r,e){var t;return n(this,(function(n){switch(n.label){case 0:return e?[5,a(l(r))]:[3,2];case 1:return t=n.sent(),[3,4];case 2:return[5,a(f(r))];case 3:t=n.sent(),n.label=4;case 4:return[2,t]}}))}},function(r,e,t){"use strict";var n=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(r,e){var t="function"==typeof Symbol&&r[Symbol.iterator];if(!t)return r;var n,a,o=t.call(r),i=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(r){a={error:r}}finally{try{n&&!n.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__spread||function(){for(var r=[],e=0;e<arguments.length;e++)r=r.concat(o(arguments[e]));return r},u=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var s=t(2),c=u(t(4)),l=t(8);e.default=function(r){var e,t,o,u,f,d,p,h,y,v,b,m;return n(this,(function(n){switch(n.label){case 0:if(e=r.dataLink,t=r.functions,"$"!==(o=e.getCurrentValue())[1])throw new s.DataParserError(s.DataParserError.ERRORS.ITERATOR_ERROR);if(!c.default(o[2]))throw new s.DataParserError(s.DataParserError.ERRORS.FUNCTION_NAMING);o=e.getNextValue(),u="";try{for(f=a(e),d=f.next();!d.done&&(o=d.value,u+=o[1],c.default(o[2]));d=f.next());}catch(r){b={error:r}}finally{try{d&&!d.done&&(m=f.return)&&m.call(f)}finally{if(b)throw b.error}}if("function"!=typeof(p=t[u])){if("("!==o[2]&&!e.isEnd()&&!c.default(o[2]))throw new s.DataParserError(s.DataParserError.ERRORS.FUNCTION_NAMING);throw new s.DataParserError(s.DataParserError.ERRORS.FUNCTION_UNKNOWN)}return"("!==o[2]?[3,2]:(e.getNextValue(),y=(h=p).apply,v=[void 0],[5,a(l.expressionParser(r,!0))]);case 1:return[2,y.apply(h,v.concat([i.apply(void 0,[n.sent()])]))];case 2:return[2,p]}}))}},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},o=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var u=i(t(4)),s=t(2),c=i(t(8)),l=t(5),f=function(r,e){var t,i,f,h,y,v,b,m,E;return a(this,(function(a){switch(a.label){case 0:if(t=r.dataLink,i=r.defaultValue,f="","/"!==(h=t.getCurrentValue())[1]&&"@"!==h[1])throw new s.DataParserError(s.DataParserError.ERRORS.ITERATOR_ERROR);if(t.isEnd())return[2,e];t.getNextValue(),a.label=1;case 1:a.trys.push([1,12,13,14]),y=o(t),v=y.next(),a.label=2;case 2:if(v.done)return[3,11];switch(h=v.value,h[1]){case"<":return[3,3];case":":return[3,4];case"$":case"(":return[3,5];case"\\":return[3,7]}return[3,8];case 3:if("/"!==h[0])throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_PART);return[2,p(r,e)];case 4:return f=d(r,e),[3,9];case 5:if("/"!==h[0]&&"@"!==h[0])throw new s.DataParserError(s.DataParserError.ERRORS.LINK);return[5,o(c.default(n(n({},r),{data:e})))];case 6:if("string"!=typeof(f=a.sent()))throw new s.DataParserError(s.DataParserError.ERRORS.LINK);return[3,9];case 7:if("string"!=typeof f)throw new s.DataParserError(s.DataParserError.ERRORS.LINK);if(" "===h[2])throw new s.DataParserError(s.DataParserError.ERRORS.LINK);return f+=h[2],t.getNextValue(),[3,9];case 8:if(!u.default(h[1]))throw new s.DataParserError(s.DataParserError.ERRORS.LINK);if("string"!=typeof f)throw new s.DataParserError(s.DataParserError.ERRORS.LINK);f+=h[1],a.label=9;case 9:if(h=t.getCurrentValue(),t.isEnd()||"/"===h[2]||"\\"!==h[2]&&!u.default(h[2]))return[3,11];a.label=10;case 10:return v=y.next(),[3,2];case 11:return[3,14];case 12:return b=a.sent(),m={error:b},[3,14];case 13:try{v&&!v.done&&(E=y.return)&&E.call(y)}finally{if(m)throw m.error}return[7];case 14:if("string"!=typeof f)throw new s.DataParserError(s.DataParserError.ERRORS.LINK);return l.isObject(e)||Array.isArray(e)?f&&/^\d+$/.test(f)&&Array.isArray(e)?[2,e[Number(f)]||i]:f&&l.isObject(e)?[2,void 0===e[f]?i:e[f]]:[2,i]:[2,i]}}))},d=function(r,e){var t,n,a=r.dataLink,i=r.defaultValue,c=r.tokens,f=void 0===c?{}:c,d="",p=a.getCurrentValue();if(":"!==p[1])throw new s.DataParserError(s.DataParserError.ERRORS.ITERATOR_ERROR);if("/"!==p[0]&&"@"!==p[0]||a.isEnd()||"\\"!==p[2]&&!u.default(p[2]))throw new s.DataParserError(s.DataParserError.ERRORS.LINK);a.getNextValue();try{for(var h=o(a),y=h.next();!y.done&&(d+=(p=y.value)[1],!a.isEnd()&&("\\"===p[2]||"/"!==p[2]&&u.default(p[2])));y=h.next());}catch(r){t={error:r}}finally{try{y&&!y.done&&(n=h.return)&&n.call(h)}finally{if(t)throw t.error}}var v=d&&Object.prototype.hasOwnProperty.call(f,d)?f[d]:0;if(!l.isObject(e)&&!Array.isArray(e))return console.warn("Error: The data should be an object or an array!"),i;var b=e[v];return void 0===b?i:b},p=function(r,e){var t,n,a=r.dataLink,i="",c=a.getCurrentValue();if(!Array.isArray(e))throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_NOT_ARRAY_DATA);if("<"!==c[1])throw new s.DataParserError(s.DataParserError.ERRORS.ITERATOR_ERROR);if(">"===c[2]||"/"!==c[0])throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_EMPTY);a.getNextValue();try{for(var l=o(a),f=l.next();!f.done;f=l.next()){if(c=f.value,!u.default(c[1]))throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_NAME);if(i+=c[1],">"===c[2])break}}catch(r){t={error:r}}finally{try{f&&!f.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}if("/"===(c=a.getNextValue())[2])throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_LAST);if(u.default(c[2]))throw new s.DataParserError(s.DataParserError.ERRORS.INDEX_PART);for(var d in e)e[d][i]=d;return e};e.default=function(r){var e,t,n,i,c,l,d,p,h,y;return a(this,(function(a){switch(a.label){case 0:if(e=r.dataLink,t=r.data,n=r.rootData,"@"!==(i=e.getCurrentValue())[1])throw new s.DataParserError(s.DataParserError.ERRORS.ITERATOR_ERROR);c=t,"/"===i[2]&&(c=n,e.getNextValue()),a.label=1;case 1:a.trys.push([1,8,9,10]),l=o(e),d=l.next(),a.label=2;case 2:return d.done?[3,7]:"/"!==(i=d.value)[1]&&"@"!==i[1]?[3,4]:[5,o(f(r,c))];case 3:return c=a.sent(),[3,5];case 4:throw new s.DataParserError(s.DataParserError.ERRORS.LINK);case 5:if(i=e.getCurrentValue(),e.isEnd()||"/"!==i[2]&&!u.default(i[2]))return[3,7];a.label=6;case 6:return d=l.next(),[3,2];case 7:return[3,10];case 8:return p=a.sent(),h={error:p},[3,10];case 9:try{d&&!d.done&&(y=l.return)&&y.call(l)}finally{if(h)throw h.error}return[7];case 10:return[2,c]}}))}},function(r,e,t){"use strict";var n=this&&this.__generator||function(r,e){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var i=t(2),u=t(20),s=o(t(4)),c=o(t(8)),l=Symbol("NotDefined"),f=function(r){var e,t,o,u,l,f,d,p,h;return n(this,(function(n){switch(n.label){case 0:e=r.dataLink,t="",n.label=1;case 1:n.trys.push([1,10,11,12]),o=a(e),u=o.next(),n.label=2;case 2:if(u.done)return[3,9];if("{"===(l=u.value)[1]||"}"===l[1])throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);switch(l[1]){case"(":case"@":case"$":return[3,3];case"\\":return[3,5]}return[3,6];case 3:return[5,a(c.default(r))];case 4:if("string"!=typeof(f=n.sent()))throw new i.DataParserError(i.DataParserError.ERRORS.OBJECT_KEY_STRING);return t+=f,l=e.getCurrentValue(),[3,7];case 5:return l=e.getNextValue(),t+=l[1],[3,7];case 6:if("/"!==l[1]&&!s.default(l[1]))throw new i.DataParserError(i.DataParserError.ERRORS.OBJECT_KEY);t+=l[1],n.label=7;case 7:if(e.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);if(":"===l[2]||" "===l[2])return[3,9];n.label=8;case 8:return u=o.next(),[3,2];case 9:return[3,12];case 10:return d=n.sent(),p={error:d},[3,12];case 11:try{u&&!u.done&&(h=o.return)&&h.call(o)}finally{if(p)throw p.error}return[7];case 12:return[2,t]}}))};e.default=function(r){var e,t,o,s,c,d,p,h,y,v;return n(this,(function(n){switch(n.label){case 0:if(e=r.dataLink,t=e.getCurrentValue(),o={},s=l,c=l,"{"!==t[1])throw new i.DataParserError(i.DataParserError.ERRORS.ITERATOR_ERROR);n.label=1;case 1:n.trys.push([1,11,12,13]),d=a(e),p=d.next(),n.label=2;case 2:if(p.done)return[3,10];switch(t=p.value,t[1]){case",":case"{":return[3,3];case":":return[3,5]}return[3,7];case 3:if(" "===t[2]&&(u.spaceSkipping(r),t=e.getCurrentValue()),e.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);return e.getNextValue(),[5,a(f(r))];case 4:if(s=n.sent()," "===(t=e.getCurrentValue())[2]&&(u.spaceSkipping(r),t=e.getCurrentValue()),e.isEnd()||":"!==t[2])throw new i.DataParserError(i.DataParserError.ERRORS.OBJECT_KEY);return[3,8];case 5:if(" "===t[2]&&(u.spaceSkipping(r),t=e.getCurrentValue()),e.isEnd()||","===t[2]||"}"===t[2])throw new i.DataParserError(i.DataParserError.ERRORS.OBJECT_VALUE);return e.getNextValue(),[5,a(u.valueParser(r,!1))];case 6:if(c=n.sent(),!s||"string"!=typeof s)throw new i.DataParserError(i.DataParserError.ERRORS.OBJECT_KEY);if(o[s]=c," "===(t=e.getCurrentValue())[2]&&(u.spaceSkipping(r),t=e.getCurrentValue()),","===t[2]||"}"===t[2])return[3,8];throw new i.DataParserError(i.DataParserError.ERRORS.OBJECT_VALUE);case 7:throw new i.DataParserError(i.DataParserError.ERRORS.DEFAULT);case 8:if(e.isEnd())throw new i.DataParserError(i.DataParserError.ERRORS.NESTING);if("}"===t[2])return e.getNextValue(),[3,10];n.label=9;case 9:return p=d.next(),[3,2];case 10:return[3,13];case 11:return h=n.sent(),y={error:h},[3,13];case 12:try{p&&!p.done&&(v=d.return)&&v.call(d)}finally{if(y)throw y.error}return[7];case 13:return[2,o]}}))}},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var a=t(2);e.default=function(r){var e,t,o=r.dataLink,i="",u=o.getCurrentValue();if("`"!==u[1])throw new a.DataParserError(a.DataParserError.ERRORS.ITERATOR_ERROR);o.getNextValue();try{for(var s=n(o),c=s.next();!c.done&&"`"!==(u=c.value)[1];c=s.next()){if("\\"===u[1]&&(u=o.getNextValue()),o.isEnd())throw new a.DataParserError(a.DataParserError.ERRORS.DEFAULT);i+=u[1]}}catch(r){e={error:r}}finally{try{c&&!c.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}return i}},function(r,e,t){"use strict";var n=this&&this.__read||function(r,e){var t="function"==typeof Symbol&&r[Symbol.iterator];if(!t)return r;var n,a,o=t.call(r),i=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(r){a={error:r}}finally{try{n&&!n.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spread||function(){for(var r=[],e=0;e<arguments.length;e++)r=r.concat(n(arguments[e]));return r};Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function r(e){if("string"!=typeof e||!e.trim())throw new Error("DataLink: The dataLink must be a not empty string!");this.string=e.trim(),this.processingString=a([r.START],this.string,[r.END]),this.reset()}return r.prototype.size=function(){return this.string.length},r.prototype.getCursorPositionInfo=function(){var r=this.string,e=this.getCurrentValue()[1],t=this.isEnd(),n=this.getCurrentIndex();return r.slice(0,n)+"*>"+e+"<*"+(t?"":r.slice(n+1,r.length))},r.prototype.getNextValue=function(){return this.pause?(this.pause=!1,this.currentValue):this.current>this.string.length?void 0:(this.current++,this.currentValue[0]=this.currentValue[1],this.currentValue[1]=this.currentValue[2],this.currentValue[2]=this.processingString[this.current+1],this.currentValue)},r.prototype.reset=function(){this.current=1,this.currentValue=[this.processingString[0],this.processingString[1],this.processingString[2]],this.iteratorValue={value:this.currentValue,done:!1}},r.prototype.getCurrentIndex=function(){return this.current?this.current-1:0},r.prototype.getCurrentValue=function(){return this.currentValue},r.prototype.isStart=function(){return this.currentValue[0]===r.START},r.prototype.isEnd=function(){return this.currentValue[2]===r.END},r.prototype.valueOf=function(){return this.string},r.prototype.toString=function(){return this.string},r.prototype.next=function(){return this.current>this.string.length?{value:void 0,done:!0}:(this.iteratorValue.value=this.getNextValue(),this.iteratorValue)},r.prototype[Symbol.iterator]=function(){return this.pause=!0,this},r.START="",r.END="",r}();e.default=o},function(r,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=t(10),a=new Map;e.default=function(r){if("string"!=typeof r||!r)throw new Error("getDataLink: Data link should be a non empty string!");return a.has(r)?a.get(r).reset():a.set(r,new n.DataLink(r)),a.get(r)}},function(r,e,t){"use strict";var n=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.awaitAll=void 0;var a=n(t(63));e.awaitAll=a.default},function(r,e,t){"use strict";var n=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var a=n(t(30)),o=n(t(19));e.default=function(r){for(var e=null,t=new Promise((function(r,t){e=t})),n=[],i=function(e){var t=r[e],i=new Promise((function(r){if(!(t instanceof Promise))throw new Error("SectionsComputation: chains must contain only promises.");t.then((function(e){r({status:"success",data:e})}),(function(e){var t="unknownError";switch(!0){case e instanceof a.default:t="validationError";break;case e instanceof o.default:t="breakError"}r({status:t,error:e})}))}));n.push(i)},u=0;u<r.length;u++)i(u);var s=Promise.all(n),c=Promise.race([t,s]);return{rejectCallback:e,promise:c}}},function(r,e,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)},a=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var o=a(t(0)),i=t(33),u=a(t(67)),s=t(14),c=t(3),l=t(5),f=a(t(7)),d=a(t(9)),p=a(t(71)),h=function(r){var e=r.parsedSchema,t=r.level,n=void 0===t?0:t;return o.default.createElement(b,{parsedSchema:e,level:n})},y=function(r){var e=r.parsedSchema,t=r.level,n=void 0===t?0:t;return o.default.createElement(p.default,{parsedSchema:e,level:n})},v=i.compose(i.branch((function(r){var e=r.context,t=r.parsedSchema;return!(e&&c.strictlyIsObject(e)&&t&&c.strictlyIsObject(t))}),i.renderNothing),i.withProps((function(r){var e=r.history,t=r.context,a=r.computations,i=r.parsedSchema,s=r.sectionComponents,c=r.level,p=void 0===c?0:c,v=n({},u.default.parse(e.location.search)),b=null!=i?i:{},m=b._type_,E=void 0===m?"":m,_=b._visible_,w=void 0===_||_,g=null!=i?i:{},O=g._sections_,P=void 0===O?[]:O,R=g._fields_,S=void 0===R?[]:R;if(!Array.isArray(P)||!Array.isArray(S))throw new Error("Sections: _sections_/_fields_ must be an array.");l.isDataLink(E)&&"string"!=typeof(E=f.default({dataLink:d.default(E),data:t,renderFunctions:a}))&&(console.error("[error] SectionEntry: _type_ must be a string."),E=""),l.isDataLink(w)&&(w=f.default({dataLink:d.default(w),data:t,renderFunctions:a}));var D=E&&E in s&&s[E]?s[E]:s.DefaultSection;if(!D)throw new Error("Sections: DefaultSection must be defined.");var j=[];P.length&&(j=P.map((function(r,e){return o.default.createElement(h,{parsedSchema:r,level:p+1,key:e})})));var x=[];return S.length&&(x=S.map((function(r,e){return o.default.createElement(y,{parsedSchema:r,level:p,key:e})}))),{tokenParams:v,visible:!!w,Comp:D,sections:j,fields:x}})),i.branch((function(r){return!r.visible}),i.renderNothing))((function(r){var e=r.parsedSchema,t=r.level,n=r.tokenParams,a=r.context,i=r.Comp,u=r.sections,s=r.fields,c=r.updateState,l=r.computations,f=r.styles;return o.default.createElement(i,{styles:f,context:a,parsedSchema:e,sections:u,fields:s,tokenParams:n,level:t||0,updateState:c,computations:l,ScopedSection:h,ScopedField:y})})),b=function(r){var e=r.parsedSchema,t=r.level;return o.default.createElement(s.SectionsContext.Consumer,null,(function(r){var n=r.computations,a=r.sectionComponents,i=r.fieldComponents,u=r.context,s=r.updateState,c=r.styles,l=r.history,f=r.location,d=r.match;return o.default.createElement(v,{styles:c,level:t,context:u,parsedSchema:e,updateState:s,computations:n,sectionComponents:a,fieldComponents:i,history:l,location:f,match:d})}))};e.default=b},function(r,e){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(r){"object"==typeof window&&(t=window)}r.exports=t},function(r,e){r.exports=function(r){if(!r.webpackPolyfill){var e=Object.create(r);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(r,e,t){"use strict";const n=t(68),a=t(69),o=t(70);function i(r){if("string"!=typeof r||1!==r.length)throw new TypeError("arrayFormatSeparator must be single character string")}function u(r,e){return e.encode?e.strict?n(r):encodeURIComponent(r):r}function s(r,e){return e.decode?a(r):r}function c(r){const e=r.indexOf("#");return-1!==e&&(r=r.slice(0,e)),r}function l(r){const e=(r=c(r)).indexOf("?");return-1===e?"":r.slice(e+1)}function f(r,e){return e.parseNumbers&&!Number.isNaN(Number(r))&&"string"==typeof r&&""!==r.trim()?r=Number(r):!e.parseBooleans||null===r||"true"!==r.toLowerCase()&&"false"!==r.toLowerCase()||(r="true"===r.toLowerCase()),r}function d(r,e){i((e=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},e)).arrayFormatSeparator);const t=function(r){let e;switch(r.arrayFormat){case"index":return(r,t,n)=>{e=/\[(\d*)\]$/.exec(r),r=r.replace(/\[\d*\]$/,""),e?(void 0===n[r]&&(n[r]={}),n[r][e[1]]=t):n[r]=t};case"bracket":return(r,t,n)=>{e=/(\[\])$/.exec(r),r=r.replace(/\[\]$/,""),e?void 0!==n[r]?n[r]=[].concat(n[r],t):n[r]=[t]:n[r]=t};case"comma":case"separator":return(e,t,n)=>{const a="string"==typeof t&&t.split("").indexOf(r.arrayFormatSeparator)>-1?t.split(r.arrayFormatSeparator).map(e=>s(e,r)):null===t?t:s(t,r);n[e]=a};default:return(r,e,t)=>{void 0!==t[r]?t[r]=[].concat(t[r],e):t[r]=e}}}(e),n=Object.create(null);if("string"!=typeof r)return n;if(!(r=r.trim().replace(/^[?#&]/,"")))return n;for(const a of r.split("&")){let[r,i]=o(e.decode?a.replace(/\+/g," "):a,"=");i=void 0===i?null:["comma","separator"].includes(e.arrayFormat)?i:s(i,e),t(s(r,e),i,n)}for(const r of Object.keys(n)){const t=n[r];if("object"==typeof t&&null!==t)for(const r of Object.keys(t))t[r]=f(t[r],e);else n[r]=f(t,e)}return!1===e.sort?n:(!0===e.sort?Object.keys(n).sort():Object.keys(n).sort(e.sort)).reduce((r,e)=>{const t=n[e];return Boolean(t)&&"object"==typeof t&&!Array.isArray(t)?r[e]=function r(e){return Array.isArray(e)?e.sort():"object"==typeof e?r(Object.keys(e)).sort((r,e)=>Number(r)-Number(e)).map(r=>e[r]):e}(t):r[e]=t,r},Object.create(null))}e.extract=l,e.parse=d,e.stringify=(r,e)=>{if(!r)return"";i((e=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},e)).arrayFormatSeparator);const t=t=>e.skipNull&&null==r[t]||e.skipEmptyString&&""===r[t],n=function(r){switch(r.arrayFormat){case"index":return e=>(t,n)=>{const a=t.length;return void 0===n||r.skipNull&&null===n||r.skipEmptyString&&""===n?t:null===n?[...t,[u(e,r),"[",a,"]"].join("")]:[...t,[u(e,r),"[",u(a,r),"]=",u(n,r)].join("")]};case"bracket":return e=>(t,n)=>void 0===n||r.skipNull&&null===n||r.skipEmptyString&&""===n?t:null===n?[...t,[u(e,r),"[]"].join("")]:[...t,[u(e,r),"[]=",u(n,r)].join("")];case"comma":case"separator":return e=>(t,n)=>null==n||0===n.length?t:0===t.length?[[u(e,r),"=",u(n,r)].join("")]:[[t,u(n,r)].join(r.arrayFormatSeparator)];default:return e=>(t,n)=>void 0===n||r.skipNull&&null===n||r.skipEmptyString&&""===n?t:null===n?[...t,u(e,r)]:[...t,[u(e,r),"=",u(n,r)].join("")]}}(e),a={};for(const e of Object.keys(r))t(e)||(a[e]=r[e]);const o=Object.keys(a);return!1!==e.sort&&o.sort(e.sort),o.map(t=>{const a=r[t];return void 0===a?"":null===a?u(t,e):Array.isArray(a)?a.reduce(n(t),[]).join("&"):u(t,e)+"="+u(a,e)}).filter(r=>r.length>0).join("&")},e.parseUrl=(r,e)=>({url:c(r).split("?")[0]||"",query:d(l(r),e)}),e.stringifyUrl=(r,t)=>{const n=c(r.url).split("?")[0]||"",a=e.extract(r.url),o=e.parse(a),i=function(r){let e="";const t=r.indexOf("#");return-1!==t&&(e=r.slice(t)),e}(r.url),u=Object.assign(o,r.query);let s=e.stringify(u,t);return s&&(s="?"+s),`${n}${s}${i}`}},function(r,e,t){"use strict";r.exports=r=>encodeURIComponent(r).replace(/[!'()*]/g,r=>"%"+r.charCodeAt(0).toString(16).toUpperCase())},function(r,e,t){"use strict";var n=new RegExp("%[a-f0-9]{2}","gi"),a=new RegExp("(%[a-f0-9]{2})+","gi");function o(r,e){try{return decodeURIComponent(r.join(""))}catch(r){}if(1===r.length)return r;e=e||1;var t=r.slice(0,e),n=r.slice(e);return Array.prototype.concat.call([],o(t),o(n))}function i(r){try{return decodeURIComponent(r)}catch(a){for(var e=r.match(n),t=1;t<e.length;t++)e=(r=o(e,t).join("")).match(n);return r}}r.exports=function(r){if("string"!=typeof r)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof r+"`");try{return r=r.replace(/\+/g," "),decodeURIComponent(r)}catch(e){return function(r){for(var e={"%FE%FF":"��","%FF%FE":"��"},t=a.exec(r);t;){try{e[t[0]]=decodeURIComponent(t[0])}catch(r){var n=i(t[0]);n!==t[0]&&(e[t[0]]=n)}t=a.exec(r)}e["%C2"]="�";for(var o=Object.keys(e),u=0;u<o.length;u++){var s=o[u];r=r.replace(new RegExp(s,"g"),e[s])}return r}(r)}}},function(r,e,t){"use strict";r.exports=(r,e)=>{if("string"!=typeof r||"string"!=typeof e)throw new TypeError("Expected the arguments to be of type `string`");if(""===e)return[r];const t=r.indexOf(e);return-1===t?[r]:[r.slice(0,t),r.slice(t+e.length)]}},function(r,e,t){"use strict";var n=this&&this.__values||function(r){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0});var o=a(t(0)),i=t(33),u=t(14),s=t(3),c=t(5),l=a(t(7)),f=a(t(9)),d=t(29),p={_onBlur_:"onBlur",_onChange_:"onChange",_onClick_:"onClick"},h=i.compose(i.branch((function(r){var e=r.context,t=r.parsedSchema;return s.isEmpty(e)||s.isEmpty(t)}),i.renderNothing),i.withStateHandlers({loading:!1},{setLoadingState:function(){return function(r){return{loading:!!r}}}}),i.withPropsOnChange(["context","parsedSchema"],(function(r){var e,t,a=r.context,o=void 0===a?{}:a,i=r.parsedSchema,u=r.updateState,s=r.match,h=r.location,y=r.fieldComponents,v=r.computations,b=r.loading,m=null!=i?i:{},E=m._objectId_,_=void 0===E?0:E,w=m._value_,g=void 0===w?"":w,O=m._visible_,P=void 0===O||O,R=m._computations_,S=void 0===R?{}:R,D=(S._initial_,S._before_,S._handlers_),j=void 0===D?{}:D,x=S._after_,k=void 0===x?[]:x;S._unmount_;if(_&&!Number.isInteger(_))throw new Error("[error] SectionField: _objectId_ must be a number.");var N=(null!=i?i:{})._type_,C=void 0===N?"":N;if(!Array.isArray(k))throw new Error("[error] SectionField: _after_ must be an array.");var A="string"==typeof P?d.simpleDataParser({dataLink:P,data:o,renderFunctions:v}):!!P;c.isDataLink(C)&&"string"!=typeof(C=l.default({dataLink:f.default(C),data:o,renderFunctions:v}))&&(console.error("[error] SectionField: _type_ must be a string."),C="");var L=C&&C in y?y[C]:y.DefaultField;if(!L)throw new Error("[error] SectionField: DefaultField must be defined.");var T={},V=function(r){if(!(r in p))return"continue";var e=j[r];e=Array.isArray(e)?e:[e],T[p[r]]=function(r){return u(function(r,e,t,n,a,o,i,u){return{value:{dataLink:r&&"@"+r.replace(/@?\\/g,""),value:e},currentSchemaObject:t,actions:n,after:a,context:o,match:i,location:u}}(g,r.target.value,i,e,k,o,s,h))}};try{for(var I=n(Object.getOwnPropertyNames(j)),F=I.next();!F.done;F=I.next()){V(F.value)}}catch(r){e={error:r}}finally{try{F&&!F.done&&(t=I.return)&&t.call(I)}finally{if(e)throw e.error}}var M=(o?o[Symbol.for(String(_))]||{}:void 0).errors;return{visible:A,handlers:T,errors:M,loading:b,Comp:L}})),i.branch((function(r){return!r.visible}),i.renderNothing))((function(r){var e=r.parsedSchema,t=r.level,n=r.context,a=r.handlers,i=r.errors,u=r.Comp,s=r.computations,c=r.loading,l=r.styles;return o.default.createElement(u,{styles:l,loading:c,context:n,handlers:a,errors:i,parsedSchema:e,level:t||0,computations:s})}));e.default=function(r){var e=r.parsedSchema;return o.default.createElement(u.SectionsContext.Consumer,null,(function(r){var t=r.computations,n=r.sectionComponents,a=r.fieldComponents,i=r.context,u=r.updateState,s=r.styles,c=r.history,l=r.location,f=r.match;return o.default.createElement(h,{styles:s,context:i,parsedSchema:e,updateState:u,computations:t,sectionComponents:n,fieldComponents:a,history:c,location:l,match:f})}))}},function(r,e,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(r,e,t,n){void 0===n&&(n=t),Object.defineProperty(r,n,{enumerable:!0,get:function(){return e[t]}})}:function(r,e,t,n){void 0===n&&(n=t),r[n]=e[t]}),a=this&&this.__setModuleDefault||(Object.create?function(r,e){Object.defineProperty(r,"default",{enumerable:!0,value:e})}:function(r,e){r.default=e}),o=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var e={};if(null!=r)for(var t in r)Object.hasOwnProperty.call(r,t)&&n(e,r,t);return a(e,r),e};Object.defineProperty(e,"__esModule",{value:!0}),e.v5=o(t(31)),e.v4=o(t(24))},function(r,e,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(r,e,t,n){void 0===n&&(n=t),Object.defineProperty(r,n,{enumerable:!0,get:function(){return e[t]}})}:function(r,e,t,n){void 0===n&&(n=t),r[n]=e[t]}),a=this&&this.__setModuleDefault||(Object.create?function(r,e){Object.defineProperty(r,"default",{enumerable:!0,value:e})}:function(r,e){r.default=e}),o=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var e={};if(null!=r)for(var t in r)Object.hasOwnProperty.call(r,t)&&n(e,r,t);return a(e,r),e};Object.defineProperty(e,"__esModule",{value:!0}),e.v2=e.v1=void 0;var i=o(t(7));e.v1=i;var u=o(t(10));e.v2=u}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,